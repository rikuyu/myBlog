{"pages":[],"posts":[{"title":"DOMとは","text":"はじめに &emsp;この記事では、DOM とは何かについてまとめます。DOM という用語は JavaScript を勉強したことがある人ならば、だれもが聞いたことがあるものだと思います。この記事を読んで、DOM とは何なのかを学びましょう。 DOM とは&emsp;DOM とは、Document Object Model の略であり、「文書(Document)をモノ(Object)として扱う仕組み(Model)」と意訳することが出来ます。DOM とは、HTML や XML 文書を JavaScript で操作することを可能にする仕組みのことなんです。DOM は、HTML や XML 文書を操作するための API ともいうことができるでしょう。 &emsp;次の項目では、DOM を操作するうえで聞くことになるであろう言葉「ノード」について説明します。 ノードとは &emsp;ノードとは、HTML や XML 文書の中に現れる一つ一つの要素のことです。 &emsp;例えば、HTML ファイル内の&lt;p&gt;&lt;span&gt;&lt;button&gt;なんかがノードです。これらのノードには、親子関係、兄弟関係があります。それらの関係について理解するために以下の HTML ファイルを見てみましょう。 12345678910&lt;html lang=&quot;ja&quot;&gt; &lt;head&gt; &lt;title&gt;JavaScript勉強&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;DOMについて学ぼう&lt;/p&gt; &lt;span&gt;DOMがなんだかわかりましたか？&lt;/span&gt; &lt;button&gt;Yes&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; &emsp;一般に HTML ファイル内の要素は階層構造（ツリー構造）になっています。上記の HTML ファイルの階層構造は以下のようになっています。 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;＜図 1 HTML の階層構造＞ &emsp;上記の HTML ファイルでは、&lt;html&gt;タグの中に、&lt;head&gt; &lt;body&gt;タグがあり、それぞれの中に、&lt;title&gt;タグ、&lt;p&gt;&lt;span&gt;&lt;button&gt;タグがあるという構造になっています。このとき、&lt;html&gt;タグ（親）と&lt;head&gt;、&lt;body&gt;タグ（子）が親子関係に、&lt;head&gt;タグと&lt;body&gt;タグが兄弟関係になっています。そのほかにも、&lt;body&gt;タグ（親）と&lt;p&gt;&lt;span&gt;&lt;button&gt;タグ（子）が親子関係になっていますね。そして、&lt;p&gt;&lt;span&gt;&lt;button&gt;が兄弟関係になっていますね。つまり、ある要素の上の階層の要素が親要素となり、同一階層の要素が兄弟要素となります。 まとめ&emsp;最後にこの記事での要点をまとめます。 DOM とは、HTML や XML 文書を JavaScript で操作することを可能にする仕組み、HTML や XML 文書を操作するための API である。 ノードは、HTML や XML 文書の中に現れる一つ一つの要素のことであり、それらは親子・兄弟関係を持ち、階層構造を作っている。 今回の記事では、DOM とは何なのかについてまとめました。具体的な、DOM 操作方法については、今後の記事でまとめていきます。 それでは、次回の記事で 参考文献 MDN エンジニアの入り口","link":"/2020/09/03/DOM%E3%81%A8%E3%81%AF/"},{"title":"GETとPOSTの違い","text":"こんにちは、Yuuukiです。この記事では、GET と POST について述べていこうと思います。 目次 はじめに HTTP（Hyper Text Transfer Protocol）とは GET メソッド POST メソッド 特徴まとめ ひとこと 参考 はじめに&emsp;みなさんは web について学習していると GET/POST という言葉をよく目にしませんか？（私もよく目にしました。）この記事では、 HTTP とは何か、またそのメソッドである GET/POST とは何かについて説明します。&emsp;いずれの事柄も web 開発を行う上で理解しておかなければならない内容であるため、この記事を読んで大まかに理解できるようにしましょう。 HTTP（Hyper Text Transfer Protocol）とは &emsp; HTTPとは、（Hyper Text Transfer Protocol）の略であり、大まかにいうと、サーバ・クライアント間で通信をするときの規約のことです。みなさんが web ページを見るために、web ブラウザに URL を入力すると、web サーバに対して、リクエスト（=要求）が送られます。その後、そのリクエストに応じて、web サーバがレスポンスを返します。 このような過程を経て、web ページがみなさんの PC に表示されます。このとき、用いられる通信のルールが HTTP です。 GET メソッド &emsp;GET メソッドは、上記の HTTP メソッドのひとつで、データを取得するときに利用されるものです。このメソッドは、「いつ、どこからアクセスしても同じ結果が返される」（＝冪等である）ものです。そのため、GET はアクセスの基本と考えてもよいでしょう。 また、このメソッドはデータを送信する際に 以下の例のように URL にデータを付与するため、情報が丸見えになってしまうという特徴があります。 例）/get_form.html?userName=Yuuuki&age=20 （↑ これってパスワード・個人情報を送信するとき、恐いですよね……汗） POST メソッド &emsp;POST メソッドも、GETと同様に上記の HTTP メソッドのひとつです。このメソッドは、送信フォームなどで利用される方式で、データを登録・削除したいときに利用されます。 &emsp;POST は GET とは違い、クライアントが行うアクセスの時々で異なる（＝冪等でない）結果が返されます。 また、このメソッドはデータを送信する際に、HTTP リクエストのボディ部分にデータが埋め込まれるため、GET のようにデータが URL を通して見られることがありません。 特徴まとめ&emsp;GET と POST の特徴を簡単にまとめると以下のようになります。GETデータの読み取りに利用され、冪等である。POSTデータの登録・削除などデータの変更に利用され、冪等でない。この記事などを通して、GET/POST を理解できるようにしましょう。それでは、次回の記事で ひとこと&emsp;説明文で「冪等」って言葉使ったけど、この熟語は「べきとう」って読んで、「ある操作を 1 回行っても複数回行っても結果が同じであること」っていう意味らしいよ。（Wikipedia より） 参考 GET と POST の違いについて HTTP メソッド GET と POST の違い","link":"/2020/08/29/GET%E3%81%A8POST%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"Hexo テーマ（theme）をicarusへ変更する方法・カスタマイズする方法","text":"はじめに&emsp;今回の記事では、Hexo のテーマを icarus に変更する方法をまとめたいと思います。このブログの Hexo シリーズでは、始め方、本番環境へのデプロイ方法、テーマ変更など Hexo ブログについてまとめていきます。 これまでの Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 目次 Hexo のテーマについて icarus の導入方法 1 icarus のダウンロード 2 _config.yml の編集 icarus のカスタマイズ プロフィールの変更方法 ウィジェットの位置の変更方法 Hexo シリーズ 参考 Hexo のテーマについて&emsp;Hexo には、テーマ（theme）というページのデザインを決めるものがあります。Hexo のデフォルトのテーマは、landscape となっています。みなさんが Hexo ブログを初めて立ち上げたときに見たテーマが landscape です。 landscape は以下のように宇宙をモチーフにしたデザインになっています。 &emsp; Hexo には、このテーマ以外にも多くのテーマがあります。Hexo の公式サイトでは、様々なテーマを見ることが出来ます。自分の好みのテーマを探してみましょう。 Hexo 公式サイト themes &emsp;この記事では、Hexo ブログのテーマとしてよくお勧めされる icarus の導入方法について説明したいと思います。私がテーマとして、icarus を選択した理由は以下の通りです。 シンプルなデザインで個人的な好みと合う。 ページのレイアウトが良く、必要な情報が見やすくなっている。 レスポンシブデザインになっている。 導入方法・カスタマイズ方法についてのドキュメントが比較的多く存在する。 以下のリンクから、icarus をプレビューすることが出来ます。 icarus icarus の導入方法1 icarus のダウンロード&emsp;まずは、Github にて、icarus のダウンロードを行います。以下のリンクから icarus のリポジトリページへ移動して、緑色の Code ボタンを押して、Download Zip を選択して、ダウンロードしましょう。（クローンが分かる方は、そちらでも良いです。） icarus Github &emsp;ダウンロードした zip を展開し、自分の Hexo ブログの themes フォルダに入れましょう。（この themes フォルダには、デフォルトの landscape のフォルダが入っているはずです。） ※このとき、ダウンロードした icarus のフォルダ名を「hexo-theme-icarus-master」から「icarus」に変更してください。 2 _config.yml の編集&emsp;_config.ymlの theme をデフォルトの landscape から icarus に変更しましょう。 ＜変更前＞ ＜変更後＞ これで、テーマの変更が完了しました。ローカルサーバを立ち上げてテーマの変更ができていることを確認しましょう・ 1hexo s &emsp;このコマンドを実行した後、以下のようなエラーが発生することがあります。これは、エラーメッセージの通り、黄色で書かれた Package が不足しているためにおこるエラーです。 このエラーの対処として、上の画像の緑色のコマンドを実行します。 1npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.8.2 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 &emsp;その後、もう一度hexo sを実行しましょう。ターミナルに以下のようなメッセージが表示されていれば、OK です。 &emsp;このエラー以外のエラーが出る場合は、エラーメッセージを読むと解決ができるかもしれません。 &emsp;そして、ブラウザのアドレスバーに、http://localhost:4000 を入力して、ページを確認しましょう。以下のように反映されているのが確認できますね。 &emsp;お疲れ様です。以上でテーマの変更が完了しました。プロフィールやリンクなどウィジェット（Widget）の位置を変更して、ブログを自分好みにカスタマイズしましょう。これより以後は、icarus のカスタマイズの方法について説明します。 ウィジェット（Widget）・・・ボタンやボックスなどのインターフェースの総称 ウィジェットという言葉は以後使用するものなので理解しておきましょう。 icarus のカスタマイズ&emsp;icarus へのテーマ変更が終わりましたが、プロフィールの内容やウィジェットの位置の変更がしたいですよね。これ以後は、以下の事柄について説明します。 プロフィールの変更方法 ウィジェットの位置の変更方法 &emsp;icarus のカスタマイズについての資料は、icarus の公式 Wiki やコミュニティで解説されていますが、英語、中国語、韓国語で書かれているため、なかなか読みづらく苦労すると思います。ここでは、日本語でなるべくわかりやすく説明したいと思います。 プロフィールの変更方法&emsp;icarus のカスタマイズを行うには、themes/_config.icarus.ymlを編集します。 &emsp;プロフィールを変更するためには、以下の部分を編集します。 12345678910111213141516171819202122232425262728293031323334353637383940# Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: Your name # Author title author_title: Your title # Author's current location location: Your location # URL or path to the avatar image avatar: # Whether show the rounded avatar image avatar_rounded: false # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: 'https://github.com/ppoffice' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/ppoffice' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' Portfolio: icon: far fa-address-card url: 'https://www.resume.id/yuuuki' RSS: icon: fas fa-rss url: / &emsp;ソースコードを見ると、`author`、`author_title`、`location`があると思います。この部分を、自分の使いたい名前や説明、所在地を記入して、プロフィールをカスタマイズあいましょう。 &emsp;avatarにプロフィール画像の相対パスを追記すると、プロフィール画像を変更することが出来ます。 &emsp;また、social_linksの部分を見ると、各 SNS のリンクを変更できることが分かると思います。このリンク部分を自分の SNS アカウントのリンクに変更しましょう。コメントアウトすることで、そのリンクボタンを画面から非表示にすることも可能です。 ウィジェットの位置の変更方法&emsp;ウィジェットの位置を変更するためには、プロフィールの変更と同じくthemes/_config.icarus.ymlを編集します。 &emsp;下のソースコードの各ウィジェットのpositionをright、left、nullにすることで、位置を変更したり、非表示にすることが出来ます。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990widgets: # Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: Your name # Author title author_title: Your title # Author's current location location: Your location # URL or path to the avatar image avatar: # Whether show the rounded avatar image avatar_rounded: false # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: 'https://github.com/ppoffice' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/ppoffice' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' RSS: icon: fas fa-rss url: / # Table of contents widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: toc # Recommendation links widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: links # Names and URLs of the sites links: Hexo: 'https://hexo.io' Bulma: 'https://bulma.io' # Categories widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: categories # Recent posts widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: recent_posts # Archives widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: archives # Tags widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: tags # Google FeedBurner email subscription widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: subscribe_email # Hint text under the email input description: # Feedburner ID feedburner_id: '' # Google AdSense unit configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: adsense # AdSense client ID client_id: '' # AdSense AD unit ID slot_id: '' &emsp;この記事では、説明していませんが、ファビコンの変更、メニューバーの変更も行うことが出来ます。適宜調べながら、ブログを自分好みにカスタマイズしましょう。 Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法 Hexo に共有機能・シェアボタンを実装しよう ～ Addthis ～ Hexo プラグイン「目次・さらに読む」機能を追加しよう 参考 Hexo テーマ(theme)変更: icarus - J’s Tech Blog Hexo で Blog を書くためのオススメ theme 一覧 hexo-theme-icarus","link":"/2020/09/10/Hexo-%E3%83%86%E3%83%BC%E3%83%9E%EF%BC%88theme%EF%BC%89%E3%82%92icarus%E3%81%B8%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%83%BB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"Hexoに共有機能・シェアボタンを実装しよう ～Addthis～","text":"はじめに&emsp;今回は、SNS に対応したシェアボタンを web サイトに設置することができる「Addthis」というサービスを紹介したいと思います。このサービスは無料で間単に利用できるため、みなさんも利用してみましょう。 &emsp;この「Yuuuki Blog」の左下にあるボタンも Addthis によって生成されたものです。ボタンにカーソルをホバーすると、Twitter、SNS などに共有するためのボタン、ブラウザにお気に入りとして保存するボタンが現れることが分かると思います。このボタンにより共有がしやすくなり非常に便利ですね。 &emsp;この記事の読者は、Hexo ブログを運営している方が多いと思うので、今回は Hexo への導入方法に焦点を当てて説明します。 Adddthis の使い方&emsp;Addthis のサイトに移動しましょう。 &emsp;サービスを利用するためのアカウントをつくります。「Get started」を押して、必要項目を満たしてアカウントを作成しましょう。 &emsp;アカウントが作成出来たら、作成するツールを選びましょう。今回はシェアボタンを選択しますが、他のツールも選択できるようですね。 &emsp;シェアボタンの種類として、Floating、Inline、Expanding などがあります。以下がプレビューです。 Floating Inline Expanding &emsp;この記事では、Expanding を選択します。Continue を押して次へ進み、４種類のタブで適宜ボタンをカスタマイズしましょう。 &emsp;ここでは、私のカスタマイズ例を紹介します。まず、Share する SNS を以下のように選択します。 次に、デザインタブにて色を Default にします。 ポジションタブにてボタンの位置を左下に、PC、mobile の両方でボタンが表示されるようにします。 &emsp;最後に Activate Tool を押して、ボタンをコード化しましょう。Addthis では、HTML ベースのサイトや WordPress で作成したサイトなど様々な種類の web サイトに対応したコードを生成してくれます。 Hexo への導入方法&emsp;前項にて作成したボタンを Hexo ブログに導入しましょう。まずは、先ほど生成したコードをコピーしておきましょう。 &emsp;以下の赤色の部分でかくれているパスをコピー &emsp;次に、Hexo ブログの_config.icarus.ymlを編集します。 1234share: type: addthis install_url: //s7.addthis.com/js/300/addthis_widget.js#pubid=xxxxxxxxxxxx //先ほどコピーしたURLをコピペ &emsp;Share 部分にて上記のようにファイルを編集します。 &emsp;これで、Hexo ブログに Addhis で作成したボタンを導入することに成功しました。非常に簡単ですね。 &emsp;試しに、Twitter で Share してみました。サムネイル付きリンクが表示されていていい感じですね。 最後に&emsp;今後は Hexo ブログにコメント機能を実装したいと考えています。あとファビコンをどうにかしたい（悩） Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法 Hexo に共有機能・シェアボタンを実装しよう ～ Addthis ～ Hexo プラグイン「目次・さらに読む」機能を追加しよう 参考 Hexo 共有機能の Plugin Add This で動的なシェアボタンを追加 Icarus User Guide - Share Buttons","link":"/2020/09/12/Hexo%E3%81%AB%E5%85%B1%E6%9C%89%E6%A9%9F%E8%83%BD%E3%83%BB%E3%82%B7%E3%82%A7%E3%82%A2%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%82%88%E3%81%86-%EF%BD%9EAddthis%EF%BD%9E/"},{"title":"Hexoプラグイン「目次・さらに読む」機能を追加しよう","text":"はじめに&emsp;今回の記事では、Hexo ブログに目次機能と「さらに読む(Read more)」機能について紹介します。この機能を Hexo ブログに導入することにことで、ブログを読みやすくしましょう 目次 目次機能 さらに読む(Read more)機能 Hexo シリーズ ↑ こんな感じの目次機能を今回紹介します。 目次機能&emsp;このブログで投稿している記事にはたびたび目次がありますが、今回紹介する目次はこれになります。 &emsp;まずは、Hexo のプラグインをインストールしましょう。以下のコマンドをターミナルで実行します。 1npm install hexo-toc --save &emsp;次に、_config.ymlを編集します。テーマを変更している場合は、その_config.ymlを編集してください。この記事では、icarusを例に編集方法を紹介します。 /_config.icarus.yml にて以下の内容を追記します 123456789toc: maxdepth: 6 class: toc slugify: transliteration anchor: position: after symbol: &quot;#&quot; style: header-anchor &emsp;プロパティの説明を一部します。 maxdepth: この値以下の見出しを削除します。anchor: アンカーについて設定できます。アンカーの位置、別タブで開くのかどうかなどが設定できます。 （アンカー ≒ リンクと同義だと思っても大丈夫です。） 各自値を変更して自分好みにカスタマイズしましょう。 &emsp; 最後に目次を作成したい記事に以下のコードを記述します。 12# 目次&lt;!-- toc --&gt; &emsp;このコードを記述すると、見出しタグから目次を作成してくれます。 さらに読む(Read more)機能&emsp;次に「さらに読む(Read more)」機能について説明します。この機能を導入すると、以下のようにホーム画面にて記事を整えることが出来ます。 &emsp;この機能を導入するために、特別なプラグインのインストールの必要はありません。以下のコードを各記事に、切りたい場所に挿入するだけです。 1&lt;!-- more --&gt; &emsp;これだけで、「さらに読む(Read more)」機能を導入できます。非常に簡単ですね。これでホーム画面をきれいに整理できました。 &emsp;今回の記事は以上になります。 Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法 Hexo に共有機能・シェアボタンを実装しよう ～ Addthis ～ Hexo プラグイン「目次・さらに読む」機能を追加しよう","link":"/2020/09/15/Hexo%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%80%8C%E7%9B%AE%E6%AC%A1%E3%83%BB%E3%81%95%E3%82%89%E3%81%AB%E8%AA%AD%E3%82%80%E3%80%8D%E6%A9%9F%E8%83%BD%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%82%88%E3%81%86/"},{"title":"Hexoとはなにか？始め方の一番分かりやすい解説！！","text":"はじめに&emsp;この記事では、簡単にブログが作成・運営できる Hexo ついてまとめたいと思います。このブログ「Yuuuki Blog」も Hexo を使って作られています。みなさんも Hexo を使ってブログを作成しましょう。このブログの Hexo シリーズでは、Hexo の始め方、本番環境へのデプロイ方法、テーマ変更など Hexo ブログについてまとめていきます。 この記事で、まとめる内容は、以下の通りです。 Hexo の特徴などの説明 Hexo の始め方 Hexo の構成、フォルダの内容 目次 Hexo とは Hexo 特徴まとめ 導入方法・始め方 Hexo の構成 最後に Hexo シリーズ 参考 Hexo とは&emsp;Hexo とは、Node.js を使って作られている静的ジェネレータです。Node.js によって作られているので、環境構築や記事の作成が非常に早く行うことが出来ます。また、Hexo は、コマンドが充実しており、記事作成や Github Pages 、Heroku 等へのデプロイが簡単に行うことが可能です。 静的ジェネレータ・・・静的な web ページを作成できるツールのこと &emsp;ブログを作るとなったら、WordPress が浮かぶと思いますが、Hexo は WordPress よりも簡単に作成・運営ができるようです。 Hexo 特徴まとめ 簡単に作成・運営できる静的ジェネレータ Node.js によって作られているので非常に高速 コマンドが充実しているので、操作が簡単 導入方法・始め方Hexo を使ってブログを開設する具体的な方法について説明します。 &emsp;まず、Hexo をインストールするために必要な Node.js・npm をインストールします。すでに、インストールされている方は、再度インストールすることは不要です。ここでは、インストール方法については省きます。 &emsp;Node.js・npm がインストールしているかをコマンドで確認してみましょう。 12345node -vv12.16.1npm -v6.13.4 上記のようにバージョンが表示されていれば OK です。-v は-version としても実行できます。 Hexo をインストールします。以下のコマンドをターミナルで打ちましょう。 1npm install hexo-cli -g 自分のパソコンにブログを作成したい場所を作ります。ディレクトリ（フォルダ）を作成しましょう。 ここでは、ディレクトリ名を blog とします。（任意の名前で OK です。） 次に、Hexo ブログのひな型を作成します。cd コマンドで blog に移動して、以下のコマンドを打ちます。自分のブログの名前を決め、以下のコマンドを打ちましょう。 1hexo init ブログの名前 ここでは、例としてブログの名前を myblog にします。 1hexo init myblog （init とは、初期化するということです。）以下のようなメッセージがターミナル上に現れれば、成功です。 1INFO Start blogging with Hexo! 作ったブログのひな型に移動してみましょう。 1cd myblog では、作成したブログのひな型をブラウザで確認してみましょう。以下のコマンドを打ちましょう。 1hexo server このコマンドは、server を s と省略して以下のコマンドでも OK です。私はこのコマンドを使っています。 1hexo s 数秒待った後、以下のようなメッセージがターミナルに表示されれば、サーバーが上手く立ち上がっています。 &emsp;それは、ブラウザのアドレスバーに、http://localhost:4000 を入力して、ページを確認しましょう。以下のようなページが表示されていれば、成功です。 &emsp;このページには、Hexo の簡単なコマンドについて説明されています。英語ですが一度目を通してくと良いでしょう。 サーバーを閉じるときは、先ほどターミナルに表示されていた通り、Ctrl キーと C を同時に入力しましょう。閉じ忘れるとめんどくさいです。 Hexo の構成&emsp;これまで説明した内容をうまく実行できている状態で自分のブログのディレクトリがどんな構成になっているか確認してみましょう。これから確認するディレクトリ構造をおおまかに理解しておきましょう。この理解がブログを運営していくうえで、大切になります。以下の内容を読み飛ばさないことをオススメします。 Hexo の初期のディレクトリ構造は以下のようになっています。 各フォルダについてざっと説明します。 node_modules ・・・Node.js のモジュールが入っているフォルダです。Hexo ブログを運営していくうえで、基本的に触ることはないでしょう。 scaffolds・・・markdown の定型文がファイルにまとまっています。このフォルダも Hexo ブログを運営していくうえで、基本的に触ることはないでしょう。 source・・・現在投稿されている記事が入っています。上の画像の記事は、hello-world.md ですね。この記事がブラウザで表示されています。 themes・・・ブログのテーマに関するファイルが入っています。このテーマは自由に変更できます。デフォルトは landscape ですね。（上の画像から、宇宙をテーマとしていることが分かりますね）このフォルダ内の、_config.yml は landscape の設定が記述されています。 _config.yml・・・Hexo ブログ自体の設定が記述されています。 &emsp;上記以外に、.gitgnore（Git の追跡対象外のファイル設定について記述されています。）や json ファイル、yarn.lock は、Hexo ブログを運営していくうえで、基本的に触ることはないため、この段階で知る必要はないでしょう。 &emsp;このブログを Github Pages にデプロイすると、public フォルダが作成されます。（なので、最初はありません）このフォルダを Github で管理することになります。 最後に&emsp;次回以降の Hexo の記事では、記事の投稿方法や Github Pages へのデプロイ方法、テーマの変更方法などについて解説したいと思います。 Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法 Hexo に共有機能・シェアボタンを実装しよう ～ Addthis ～ Hexo プラグイン「目次・さらに読む」機能を追加しよう 参考 Hexo 公式 Hexo でローカルに静的なブログを作ってみて基本構成を把握する","link":"/2020/09/08/Hexo%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B%EF%BC%9F%E5%A7%8B%E3%82%81%E6%96%B9%E3%81%AE%E4%B8%80%E7%95%AA%E5%88%86%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E8%A7%A3%E8%AA%AC%EF%BC%81%EF%BC%81/"},{"title":"HexoブログをGithub Pagesで公開する方法","text":"はじめに&emsp;この記事では、前回に引き続き、Hexo についてまとめたいと思います。今回の記事を読めば、Hexo ブログで記事を書くことが可能になるでしょう。また、Github Pages にデプロイすることも可能になるでしょう。このブログの Hexo シリーズでは、始め方、本番環境へのデプロイ方法、テーマ変更など Hexo ブログについてまとめていきます。 &emsp;この記事で説明する内容は以下になります。 新しい記事の下書きの作り方 新しい記事（清書）の作り方 記事の編集方法 Github Pages へのデプロイ方法 前回の記事を読んでいない人は、この記事を理解するためにざっと目を通しておきましょう。 Hexo とはなにか？始め方の一番分かりやすい解説！！ 目次 下書きの作り方 清書の作り方 実際に記事を書いてみよう。 デプロイ用の public フォルダを作ろう Github Pages で Hexo ブログを公開しよう 1 プラグインのインストール 2 Github 側の操作 3 _config.yml の編集 4 デプロイコマンドの実行 5 Github Pages の設定 ひとこと Hexo シリーズ 参考 下書きの作り方&emsp;基本的に、下書き、新しい記事の作成や本番環境へのデプロイは、ターミナル上で hexo コマンドを使って行います。まずは、下書きの作り方を説明します。 &emsp;下書きは以下のコマンドで作成することが出来ます。 1hexo new draft &quot;下書きファイルの名前&quot; &emsp;例として、下書きを書くファイルの名前を「下書きテスト」としてみます。下書きファイルの名前は「” ”」で囲みましょう。 1hexo new draft &quot;下書きテスト&quot; &emsp;以下のようなメッセージがターミナル上に表示されれば、ファイル作成成功です。 &emsp;このコマンドを実行すると、source フォルダに_drafts というフォルダが作られ、その中に作成した下書きファイルが格納されます。＜コマンド実行前＞ ＜コマンド実行後＞ _drafts フォルダが確認できますね。_posts フォルダの中には、現在公開中の記事が入っていますね。 &emsp;下書きは以下のようなテンプレートで生成されます。下書きなので、markdown 記法で自由に書いてみましょう。 ちなみに、下のように、--- ---で囲まれた部分を Front-matter といいます。 1234---title: 下書きテストtags:--- 清書の作り方&emsp;清書用のファイルを作成するためには、以下のコマンドを実行します。 1hexo new “ファイルの名前” &emsp;ここでは、例として、ファイルの名前を「清書テスト」とします。 1hexo new “清書テスト” &emsp;以下のようなメッセージが表示されていれば成功です。 &emsp;以下のように、清書テストファイルが_postsフォルダに作成されていことが確認できますね。 &emsp;清書用のファイルは以下のようなテンプレートで生成されます。 実際に記事を書いてみよう。&emsp;先ほど作成した「清書テスト」に記事を書いてみましょう。以下の画像は、例です。 &emsp;次に、この記事をローカルサーバで確認してみましょう。以下のコマンドを実行します。 1hexo s &emsp;ブラウザでページを確認してみると、以下の画像のようになるはずです。（テーマの変更はしていないものとします。） &emsp;記事が追加されていることが確認できますね。 デプロイ用の public フォルダを作ろう&emsp;これまでの説明で、記事の追加方法はわかったと思います。この項目では、Github Pages 等への本番環境へデプロイする際に使用される public フォルダについて作り方を説明します。 public フォルダを作るためには、以下のコマンドを実行します。 1hexo generate generate を省略して hexo g としても実行できます。 public フォルダができていることを確認してみましょう。 これで、本番環境用の public フォルダが生成できました。 Github Pages で Hexo ブログを公開しよう&emsp;この項目では、ついに Github Pages で公開する方法を説明します。 1 プラグインのインストール&emsp;ターミナル上で、以下のコマンドを実行します。 1npm install hexo-deployer-git --save &emsp;このコマンドを実行することで、 Github Pages へのデプロイに必要な hexo-deployer-git プラグインをインストールできます。 2 Github 側の操作&emsp;Github にて、ブログを管理するリポジトリを作成します。この記事では、Github のアカウントの作り方、リポジトリの作り方は、省略したいと思います。 &emsp;ここでは、リポジトリの名前を、「HexoBlog」とします。画像の赤枠で囲まれているリポジトリの URL を使います。 3 _config.yml の編集&emsp;エディタ上で、_config.yml の以下の部分を変更しましょう。変更箇所は二か所あります。コメントを参考にして、追記しましょう。＜変更前＞ ＜変更後＞ 4 デプロイコマンドの実行&emsp;1, 2, 3 までの作業が終了したら以下のコマンドを実行します。 1hexo deploy -g このコマンドは、generate と deploy を一つのコマンドで実行しています。Github のページを確認して、以下のようになっていれば成功です。 5 Github Pages の設定&emsp;ここからは、Github 上で操作を行います。Github の HexoBlog ページにて Settings タブを押して移動します。 &emsp;以下の部分で、Github Pages の設定を行います。Source の項目で none を master に変更して、Save をクリックします。すると、ページがリロードされ、以下のような画面になります。 &emsp;URL であるhttps://rikuyu.github.io/HexoBlog/をクリックすれば、Hexo ブログが Github Pages で公開出来ていることが確認できます。 &emsp;お疲れ様です。以上をもって、Hexo ブログを Github Pages で公開手順の説明を終了します。 &emsp;既存のページの編集・更新や新たなページの追加を行う際は、ページを編集、作成し、 1hexo deploy -g を実行するだけです。簡単に管理・運営ができますね。 ひとこと&emsp;ちなみに、僕は VScode で Hexo を運営しています。ゆくゆくは、VScode についての記事も投稿するつもりです。 Hexo シリーズ Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo ブログを Github Pages で公開する方法 Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法 Hexo に共有機能・シェアボタンを実装しよう ～ Addthis ～ Hexo プラグイン「目次・さらに読む」機能を追加しよう 参考 GitHub Pages | Hexo","link":"/2020/09/09/Hexo%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92Github-Pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"【JavaScript】Bootstarp・Font Awesomeを使ってTodoリストを作ってみた","text":"はじめに&emsp;今回は、Bootstrap・Fontawesome を使って作った Todo リストについてまとめたいと思います。先日このブログで紹介した Todo リストは、登録機能・削除機能はあるものの見た目が悪かったので、今回は見た目にも配慮した Todo リストを作ってみました。 前 Todo リストは ↓ から 【JavaScript】簡単な Todo アプリを作ってみた 目次 Bootstrap とは Font Awesome とは Todo リストについて index.html Clear ボタンについて Font Awesome Bootstrap を使った感想 最後に Bootstrap とは &emsp;Bootstrap とは、Twitter 社が開発し、無料で提供している CSS フレームワークです。このサービスを利用すれば、レスポンシブなパース（ナビゲーションメニュー、リスト、フォームなど）を作ることが出来ます。詳しくは、説明しませんが無料で使用できるため、みなさんも使ってみてください。 Font Awesome とは &emsp;Font Awesome とは、フォントアイコンを提供しているサービスです。このブログにある Github、Twitter のアイコンはこのサービスを利用して表示しています。一部有料なアイコンもありますが、無料アイコンでも十分でしょう。 Todo リストについて&emsp;今回上記のサービスを利用して作った Todo アプリは以下のような見た目になっています。 ＜ Todo アイテム未登録＞ ＜ Todo アイテム登録済＞ &emsp;シンプルで見やすい Todo リストですね。＋ボタン、レ点ボタン、ごみ箱ボタンのアイコンは Font Awesome を利用したものです。 &emsp;この Todo リストの機能は以下の通りです。基本的にこの Todo リストは、前回作成した Todo リストと同じアルゴリズムで動いています。そのため、アルゴリズムが気になる人は前回の記事を振り返ってください。 テキストフィールドに Todo の内容を記入し、＋ボタンを押すと、Todo アイテムが登録され、下に表示されます。 Todo アイテムの横のレ点を押すと、その Todo アイテムが削除されます。 下の赤い Clear ボタンを押すと、登録された Todo アイテムがすべて削除されます。 前回の Todo リストと異なる点は、Clear ボタンが追加されたくらいですかね。 では、次に具体的ソースコードを見てみましょう。 index.htmlIndex.html は以下の通りです。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;TODO&lt;/title&gt; &lt;link href=&quot;https://use.fontawesome.com/releases/v5.6.1/css/all.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css&quot; integrity=&quot;sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk&quot; crossorigin=&quot;anonymous&quot; /&gt; &lt;style&gt; ul { list-style-type: none; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4 mt-4&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-md-4 mt-4&quot;&gt; &lt;div class=&quot;d-flex&quot;&gt; &lt;input id=&quot;new-todo&quot; type=&quot;text&quot; placeholder=&quot;new todo&quot; class=&quot;flex-grow-1&quot; /&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary input-group-append&quot; id=&quot;add-button&quot; &gt; &lt;i class=&quot;fas fa-plus&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;ul class=&quot;list-group&quot; id=&quot;todoList&quot;&gt;&lt;/ul&gt; &lt;div class=&quot;d-flex&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-danger flex-grow-1&quot; id=&quot;clear-button&quot; &gt; clear &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-md-4 mt-4&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;./app.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; &emsp;headタグでは、Bootstrap、Font Awesome を CDN（Content Delivery Network）から参照しています。 &emsp;このファイルでは、＋ボタン、ごみ箱ボタンは以下のように読み込んでいます。このように Font Awesome のアイコンは、&lt;i&gt;&lt;/i&gt;タグで出力することが出来ます。（詳しい使い方は省略します。） （なお、レ点ボタンは JavaScript で出力しています。） 12&lt;i class=&quot;fas fa-plus&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt; &emsp;Bootstrap は、要素に対して、クラスを付加することで使うことが出来ます。（Bootstrap に関しても詳しい説明は省きます。） 以下にこの Todo リストで使ったクラス（機能）を簡略に紹介します。 col-lg-4 col-md-4 col-mt-4グリッドシステムというレスポンシブ対応ができる仕組みを実装するクラス。 d-flex flex-grow-1フレックスボックスを実装するためのクラス btn btn-primaryボタンの色・デザインを決めることができるクラス input-group-appendインプットタグ内の要素を整えることができるクラス list-groupリストタグを整えることができるクラス &emsp;Bootstrap には、便利な機能が多くあるので、自身で調べてみましょう。 Clear ボタンについて&emsp;前回作成した Todo リストにはなかった Clear ボタンのアルゴリズムについて説明します。 以下が、Clear ボタンの HTML、JavaScript です。 HTML 1234&lt;button type=&quot;button&quot; class=&quot;btn btn-danger flex-grow-1&quot; id=&quot;clear-button&quot;&gt; clear &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&lt;/button&gt; JavaScript 123456789const clearButton = document.getElementById(&quot;clear-button&quot;);clearButton.addEventListener(&quot;click&quot;, () =&gt; { const ul = document.getElementById(&quot;todoList&quot;); while (ul.firstChild) { ul.removeChild(ul.firstChild); }}); Clear ボタンの要素を id で取得して addEventListner でクリックイベントを登録しています。クリックされたら、ulタグの子要素をwhile文によって削除しています。この部分を 1ul.innerHTML = “”; としても OK です。 Font Awesome Bootstrap を使った感想 &emsp;まず、Font Awesome について感想を述べます。このサービスはとにかく便利で、使って損なしという感じです。また、アイコンは色・大きさなどをサイトに合うようにカスタマイズすることが可能で柔軟性もあります。 &emsp;次に、Bootstrap について感想を述べます。使い方を学べば、とてつもなく便利です。たくさんの便利な機能があり、使い方を工夫し、うまく扱うことが出来ればとても素晴らしいアプリが作成できると思います。 しかし、個人的にあまり好かなかったことがいくつかあります。 &emsp;まず一つ目は、導入コスト（時間）がかかることです。というのも私は今回初めて Bootstrap を利用したんですが、使い方が良く分からず苦労しました。どんな技術でも導入コスト（時間）はかかりますが、「Bootstrap のために時間をかけるのはもったいないなぁ」と私は思ってしまいます。 &emsp;二つ目は、html が見づらくなってしまうことです。上記に示したソースコードの通り、要素にクラスがたくさんつきすぎてコードが見づらくなってしまいます。これが気になりました。 &emsp;三つ目は、自分で書いた CSS と競合してしまい、自分の思い通りのデザインにすることが困難になることです。これに関しては、私の CSS の技術力が低いだけです（涙）。「これだったら自分で書く CSS のみでいいかな」と思ってしまいます。 &emsp; どんな技術も個人の好みがあります。自分で実際に使ってみるのが良いと思います。 それでは、次回の記事で 最後に&emsp;現在、React を使って Todo リストを作っているんですが、難しいですね。一気に難易度が上がった気がします、、、","link":"/2020/09/13/%E3%80%90JavaScript%E3%80%91Bootstarp%E3%83%BBFont-Awesome%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Todo%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"【JavaScript】Mapメソッドの使い方","text":"はじめに&emsp;今回は map メソッドについての記事です。JavaScript を学んでいると、map メソッドというものを耳にしたことがあるかもしれません。この記事では、map メソッドとは、何なのか、また、map メソッドの使い方についてまとめたいと思います。 目次 map メソッドとは map メソッドの使い方 まとめ 参考 map メソッドとは&emsp;map メソッドとは、「Array オブジェクトに用意されている配列を操作するためのメソッドであり、配列の各要素に対して引数として受け取った関数の処理を行い、その処理された要素からなる新たな配列を戻り値として返すメソッド」です。 &emsp;説明されてもなんだかよく分かりませんよね。 &emsp;次の項目では、具体的な使い方について説明したいと思います。 map メソッドの使い方&emsp;map メソッドの使い方として、まずは、最も簡単な map メソッドの使用例を見てみましょう。 123456const array1 = [2, 5, 7, 9];const array2 = array1.map((data) =&gt; data * 3);// array2 = [6, 15, 21, 27] &emsp;このコードでは、まず、map メソッドの操作対象である入れる array1 を定義します。次に、この配列に対して、map メソッドを呼びだします。map メソッドの引数として、配列 array1 の各要素を 3 倍するような処理をアロー関数の形で記述しています。すると、配列 array2 は、array1 の各要素が 3 倍された要素からなる配列になります。 &emsp;次に、別の map メソッドの使用例を見てみましょう。 123456789101112const array1 = [2, 5, 7, 9, 12, 15];const array2 = array1.map((data, index) =&gt; {if (index % 2 !== 0) {return data * 2;} else {return data;}});// array2 = [2, 10, 7, 18, 12, 30] &emsp;上記のソースコードは、引数に受けとった関数（コールバック関数）の引数に、data と index があります。data とは、配列（この場合 array1）の各要素を表しています。index とは、配列の各要素の番号を表しています。これらと条件分岐 if・else を用いて、index 番号が奇数の要素を 2 倍にするという処理を実装しています。 &emsp;さらに、別の map メソッドの使用例を見てみましょう。次は、map メソッドの第二引数としてオブジェクトを渡すと、処理の中で、this を使ってオブジェクトを参照することが出来ます。次のソースコードを見てみましょう。 12345678910111213141516171819202122const age = {田中: 35,佐藤: 24,高橋: 30,武田: 15,加藤: 40,中井: 33,太田: 10,};const people = [&quot;高橋&quot;, &quot;武田&quot;, &quot;加藤&quot;, &quot;太田&quot;];const array1 = people.map(function (value) {if (this[value] &gt;= 20) {return &quot;成人&quot;;} else {return &quot;未成年&quot;;}}, age);// array1 = [&quot;成人&quot;, &quot;未成年&quot;, &quot;成人&quot;, &quot;未成年&quot;] &emsp;このプログラムでは、オブジェクトで定義された人を要素とする配列に対して、map メソッドを使い、20 歳以上ならば、”成人”を、20 歳未満ならば、”未成年”を返すことで、配列の要素になっている人が成人か未成年かを判断することを実装しています。 まとめ&emsp;この記事では、map メソッドとは何か、map メソッドの使い方について説明しました。map メソッドは、配列の各要素に対して引数として受け取った関数の処理を行い、その処理された要素からなる新たな配列を返すメソッドでした。map メソッドは、配列を操作するうえで知っておくべきメソッドであるため、上記のプログラムを踏まえ、使い方を定着させましょう。 参考 【JavaScript 入門】配列処理をする map()の使い方と Map オブジェクトの解説！ MDN","link":"/2020/09/06/%E3%80%90JavaScript%E3%80%91Map%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【JavaScript】filterメソッドの使い方","text":"はじめに&emsp;今回は filter メソッドについての記事です。前回の記事では、map メソッドについてまとめましたが、この記事では、map メソッドと似たメソッドである filter メソッドについてまとめたいと思います。 目次 filter メソッドとは filter メソッドの使い方 まとめ 参考 （前回の記事 ↓） 【JavaScript】Map メソッドの使い方 filter メソッドとは&emsp;filter メソッドとは、Array オブジェクトに用意されている配列を操作するためのメソッドです。このメソッドは、配列に対して、引数として渡された関数内の条件を満たす要素のみでなる配列を返すメソッドです。 &emsp;配列から、データを抽出する、データを絞り込む際に使うメソッドですね。 &emsp;次の項目では、実際に filter メソッドの使い方を見ていきましょう。 filter メソッドの使い方&emsp; filter メソッドの使い方として、まずは、最も簡単な map メソッドの使用例を見てみましょう。 123456const array1 = [2, 4, 5, 7, 12, 17];const array2 = array1.filter((data) =&gt; data &gt;= 5);// array2 = [5, 7, 12, 17]; &emsp;このコードでは、まず、filter メソッドの操作対象である入れる array1 を定義します。次に、この配列に対して、filter メソッドを呼びだします。filter メソッドの引数として、配列 array1 の 5 以上の要素を返す関数をアロー関数の形で記述しています。すると、配列 array2 は、array1 の各要素の中で、5 以上の要素からなる配列になります。&emsp;filter メソッドを使うことで、配列 array1 から条件に沿って要素が抽出、絞りこめれて新たに配列 array2 ができていますね。 &emsp;次に、別の filter メソッドの使用例を見てみましょう。 1234567891011121314151617const age = { 田中: 35, 佐藤: 24, 高橋: 30, 武田: 15, 加藤: 40, 太田: 10,};const peopleList = [&quot;田中&quot;, &quot;佐藤&quot;, &quot;高橋&quot;, &quot;武田&quot;, &quot;加藤&quot;, &quot;太田&quot;];const adult = peopleList.filter(function (data) { return this[data] &gt;= 20;}, age);// adult = [&quot;田中&quot;, &quot;佐藤&quot;, &quot;高橋&quot;, &quot;加藤&quot;] &emsp;上記のソースコードは、まず、氏名とその人の年齢が格納されたオブジェクト age を用意します。次に、そのオブジェクト内の氏名がすべて格納された配列 peopleList を用意します。この配列に対して、filter メソッドを使い、年齢が 20 歳以上の人の氏名を返すことを実装します。このとき、filter メソッドの第二引数として、オブジェクト age を渡すことで、コールバック関数内で、this を使ってデータが参照できるようになります。 &emsp;filter メソッドと同様に、第二引数にオブジェクトを渡すことができるんですね。上記のように、filter メソッドはデータを操作する際に非常に便利なメソッドであることが分かりますね。 まとめ&emsp;この記事では、filter メソッドとは何か、map メソッドの使い方について説明しました。filter メソッドは、ある配列に対して、引数として渡された関数内で指定された条件を満たす要素のみでなる配列を新たに返すメソッドです。つまり、filter メソッドは、配列から、データを抽出する、データを絞り込む際に使うメソッドです。 参考 JavaScript で filter を使う方法【初心者向け】","link":"/2020/09/07/%E3%80%90JavaScript%E3%80%91filter%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"【JavaScript】三項演算子について","text":"はじめに&emsp;今回は、JavaScript の三項演算子についてまとめます。三項演算子を学ぶことで、プログラムが簡略になり、読みやすいものになるでしょう。 三項演算子とは？ &emsp;三項演算子とは、if・else 文を簡単に短く書き換えたものです。それでは、ます if・else 文を見てみましょう。 12345678910let height = 170;if(height &gt;= 180){ //条件式 console.log(&quot;高身長です&quot;); //条件が true であった場合の処理}else{ console.log(&quot;高身長ではありません&quot;); //条件が false であった場合の処理} この場合、コンソールには、「高身長ではありません」と出力されます。 上記の if・else 文を三項演算子を用いて書くと、以下のようになります。 123let height = 180;console.log(height &gt;= 180 ? &quot;高身長です&quot; : &quot;高身長ではありません&quot;); となります。三項演算子を利用することで if・else 文が簡略化され、見やすくなりましたね、三項演算子では、 1条件式 ? true の場合の処理 : false の場合の処理 というように記述します。真偽値によって行う処理の文が長い場合は、以下のように、複数の行に分けて書くことも可能です。 123456let favoFruit = &quot;apple&quot;;favoFruit === &quot;apple&quot; ? console.log(&quot;favoFruitには apple が格納されています。&quot;) : console.log(&quot;favoFruitには apple が格納されていません。&quot;) 条件式に論理積を使用したいときは、以下のように記述すれば OK です。 123456let num = 20;num &gt;= 10 &amp;&amp; num % 2 === 0 ? console.log(&quot;numは10以上の偶数です&quot;) : console.log(&quot;numは10以上の偶数ではありません&quot;) 真偽値によって行う処理の文が複数あるとき、「,」カンマで区切りましょう。また、処理の文を（）で囲むと見やすくなりますね。 123456789101112let num = 20;num % 2 === 0 ? ( num++, console.log(&quot;numを奇数にしました&quot;) ) : (num++, console.log(&quot;numは10より大きい偶数ではありません&quot;) ) では、以下の if・else 文を三項演算子で書き換えるとどのようになるでしょうか。 123456789101112let num = 24;if (num % 2 === 0) { if (num % 3 === 0) { console.log(&quot;numは6の倍数です&quot;); } else { console.log(&quot;numは2の倍数ですが、6の倍数ではありません&quot;); }} else { console.log(&quot;numは奇数です&quot;);} 三項演算子を使用すると上記のコードを以下のように、書くことが出来ます。 12345678let num = 24;num % 2 === 0 ? num % 3 === 0 ? console.log(&quot;numは6の倍数です&quot;) : console.log(&quot;numは2の倍数ですが、6の倍数ではありません&quot;) : console.log(&quot;numは奇数です&quot;) if・else 文が非常にシンプルになり見やすくなりましたね。 以上、三項演算子についてまとめました。それでは、次回の記事で ひとこと&emsp;if・else 文で書くより三項演算子使って書いた方がなんとなくかっこいいよね、使いすぎ注意だけど 参考 【JavaScript 入門】条件(三項)演算子の使い方と活用例まとめ！ MDN","link":"/2020/09/01/%E3%80%90JavaScript%E3%80%91%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"【JavaScript】簡単なTodoアプリを作ってみた","text":"はじめに&emsp;今回は、JavaScript で作った超絶簡単な Todo アプリについてまとめたいと思います。この記事で紹介する簡単な Todo アプリは、React、Vue 等のライブラリ、フレームワークは使わずに素の JavaScript でを作っています。対象読者としては、基本的なメソッドが分かる JavaScript 初心者の方です。 目次 ディレクトリ構造 Todo アプリの完成イメージ・機能 index.html CSS JavaScript 最後に ディレクトリ構造&emsp;今回作成する Todo アプリは、以下のようなディレクトリ構造になっています。 todo&emsp; ├─ index.html&emsp; ├─ style.js&emsp; └─ app.js Todo アプリの完成イメージ・機能&emsp;今回作成する Todo アプリの完成イメージは以下の通りです。 &emsp;Todo アプリの機能は以下の通りです。 テキストボックスに Todo アプリの内容を記入し、add ボタンを押すと、その下に順に Todo アイテムが登録される。 done ボタンを押すと、その Todo アイテムが削除される。 Todo アイテムの内容がテキストボックスに記入されていないまま、add ボタンを押すと、alert が出現する。 index.html&emsp;index.html は以下の通りです。 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;TODO&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;input id=&quot;new-todo&quot; type=&quot;text&quot; placeholder=&quot;NEW TODO&quot; /&gt; &lt;button id=&quot;add-button&quot; class=&quot;add&quot;&gt;add&lt;/button&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;./app.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; &emsp;大きく分けて、Todoの内容記入用のinputタグ、addボタン用のbuttonタグ、Todoアイテム表示用のulタグが存在します。 &emsp;ulタグの中に、Todoアイテムとdoneボタンを子要素として持つ li が追加されます。 CSS&emsp;style.css は以下の通りです。 12345678910111213141516171819202122232425262728293031323334353637383940ul { list-style-type: none;}.container { margin-top: 30px; text-align: center;}.done-btn { width: 100px; margin-left: 30px; margin-bottom: 10px; padding: 3px; text-align: center; text-decoration: none; color: #fff; background: #7fc1ff; border-bottom: 2px solid #004a8f; border-radius: 4px;}.done-btn:active { border-bottom: 2px solid #7fc1ff;}.add { width: 100px; margin-left: 20px; margin-bottom: 10px; padding: 3px; text-align: center; text-decoration: none; color: #fff; background: #f38787; border-bottom: 2px solid #8f0013; border-radius: 4px;}.add:active { border-bottom: 2px solid #f38787;} &emsp;CSS では、ul タグの点を非表示にしたり、add、done ボタンのスタイルが整えられています。 JavaScript&emsp;JavaScript ファイル app.js は以下のようになります。 1234567891011121314151617181920212223242526272829const addButton = document.getElementById(&quot;add-button&quot;);const input = document.getElementById(&quot;new-todo&quot;);addButton.addEventListener(&quot;click&quot;, () =&gt; { if (input.value !== &quot;&quot;) { const li = document.createElement(&quot;li&quot;); const todoItem = document.createElement(&quot;span&quot;); todoItem.innerText = input.value; li.appendChild(todoItem); const doneButton = document.createElement(&quot;button&quot;); doneButton.innerText = &quot;done&quot;; doneButton.classList.add(&quot;done-btn&quot;); todoItem.appendChild(doneButton); doneButton.addEventListener(&quot;click&quot;, () =&gt; { const li = doneButton.closest(&quot;li&quot;); li.removeChild(todoItem); }); const ul = document.querySelector(&quot;ul&quot;); ul.appendChild(li); input.value = &quot;&quot;; } else { window.alert(&quot;TODOの内容が記入されていません&quot;); }}); &emsp;オブジェクト化した add ボタンに対して、addEventListener によってクリックしたときのイベントを登録します。このとき、テキストボックスが空であった場合、alert が表示されるようになっています。 &emsp;具体的なイベントの内容は、ボタンがクリックされたら、createElement によって、Todo アイテムの内容が表示される span と、done ボタンとなる button、それらを子要素とする li を生成します。その後、innerHTML によって、内容を書き込み、appendChild によって、要素を ul に追加します。また、doneButton に対して、クリックされたら、Todo アイテムを removeChild によって削除するようにしています。 最後に&emsp;今回は簡単な Todo アプリを作ってみましたが、Todo アイテムをローカルストレージに保存してみるだとか、様々な工夫が出来そうです。 &emsp;また、今後は、React、Vue 等のライブラリ、フレームワークを使用して Todo アプリを作ってみようと考えています。","link":"/2020/09/11/%E3%80%90JavaScript%E3%80%91%E7%B0%A1%E5%8D%98%E3%81%AATodo%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"【JavaScript】簡単なカウントアプリの作り方","text":"はじめに&emsp;この記事では、JavaScript を使った超絶簡単なカウントアプリについてまとめます。とても簡単に作ることができるため、今日 JavaScript を学習し始めた人でも作ることができるでしょう。 &emsp;今回つくるカウントアプリでは、基本的な DOM 操作のメソッドを取り上げているので、前回の記事「DOM とは」と合わせて読むのもよいでしょう。 DOM とは &emsp;今回は、以下のようなカウントアプリを作成します。 &emsp;まずは、今回作るカウントアプリのディレクトリ構造について話します。構造は以下の通りです。 count&emsp; ├─ index.html&emsp; └─ app.js &emsp;次に、各ファイルの中身を見てみましょう。まずは、index.html です。 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Count&lt;/title&gt; &lt;/head&gt; &lt;style&gt; .container { text-align: center; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;button id=&quot;cntUp&quot;&gt;+1&lt;/button&gt; &lt;button id=&quot;cntDown&quot;&gt;-1&lt;/button&gt; &lt;h1 id=&quot;currentCnt&quot;&gt;0&lt;/h1&gt; &lt;input id=&quot;reset&quot; type=&quot;button&quot; value=&quot;reset&quot; /&gt; &lt;/div&gt; &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; &emsp;&lt;body&gt;タグ内には、プラスカウント、マイナスカウント、カウントリセットの機能を持つ要素を&lt;button&gt;タグで実装しています。現在のカウント数を表す要素として&lt;h1&gt;タグを使用しています。また、これらの要素を中央に配置するために、&lt;style&gt;タグ内で要素に対して、text-align: center; を指定しています。&emsp;各要素の ID は、それぞれ、cntUp、cntDown、reset、currentCnt、reset としています。JavaScript を使って、DOM 操作を行うために必要なため、各要素に ID を持たせておきましょう。&emsp;次は、app.js の中身を見てみましょう。カウントアプリの JavaScript ファイルである app.js は&lt;body&gt;の閉じタグの直前に読み込んでいます。これは、web ページ、この場合、index.html の表示をブラウザ上で速くするためです。（今回は、ソースコードが少ないため、&lt;body&gt;の閉じタグの直前でなくても良いとは思いますが、、、） JavaScript ファイル（app.js）は以下のようになります。 12345678910111213141516171819202122const upButton = document.getElementById(&quot;cntUp&quot;);const downButton = document.getElementById(&quot;cntDown&quot;);const resetButton = document.getElementById(&quot;reset&quot;);const currentCnt = document.getElementById(&quot;currentCnt&quot;);let currentNum = 0;upButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum++; currentCnt.innerHTML = currentNum;});downButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum--; currentCnt.innerHTML = currentNum;});resetButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum = 0; currentCnt.innerHTML = currentNum;}); &emsp;ソースコードの中で、まず、プラスカウント、マイナスカウント、カウントリセット、現在のカウント数の要素を document オブジェクトのメソッド getElementById で取得します。（先ほど、要素に ID を持たせておいたのは、このためですね。）ここでは、各要素を取得し、変数に格納し、オブジェクト化し、操作しやすくしているんですね。また、現在のカウント数そのものを表す変数 currentNum に 0 を格納しておきます。 （ちなみに、document オブジェクトは HTML の要素を簡単に扱えるようにするためのものです。このオブジェクトには、上記の getElementById などの便利なメソッド、プロパティが用意されています。） &emsp;次に、プラスカウント、マイナスカウント、カウントリセットの機能の実装方法を説明します。 &emsp;ボタンをクリックすると、カウント数がアップ（ダウン、リセット）する機能は addEventListener で実装します。各オブジェクトに対して、click したら、カウント数をカウント数がアップ（ダウン）するように、currentNum に対してインクリメント演算子++（デクリメント演算子–）を利用します。 12currentNum++;currentNum--; &emsp;その後、currentCnt に対して、innerHTML を用いて、現在のカウント数を書き換えます。 1currentCnt.innerHTML = currentNum; &emsp;リセット機能の場合は、click されたら、リセットするように currentNum に 0 を代入し、currentCnt に対して、innerHTML を用いて、現在のカウント数を書き換えます。 12currentNum = 0;currentCnt.innerHTML = currentNum; &emsp;なお、addEventListner のイベントリスナーの登録は、ソースコードの通り、アロー関数を用いて記述しています。&emsp;とても間単に作れるカウントアプリですね。みなさんも自分なりに作ってみましょう。 以上、JavaScript を使った超絶簡単なカウントアプリの説明でした。それでは、次回の記事で","link":"/2020/09/04/%E3%80%90JavaScript%E3%80%91%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/"},{"title":"【Node.js】Expressの使い方～インストール（Express Generatorの使い方）～","text":"はじめに&emsp;今回の記事では、Node.js のフレームワークである Express のアプリケーション作成に必要なソフトウェアのインストール方法（導入方法）をまとめます。また、基本的なスクリプトを用いて Express のコードについての説明もしたいと思います。 &emsp;このブログの Node.js シリーズは、Node.js を触ったことのない筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。そのため、Node.js についてまったく知らない方も読みやすい内容になっています。 目次 Express とは インストール方法（導入方法） index.js index.ejs 最後に Node.js シリーズ 参考 Express とは&emsp;まず、Express とは何かについてまとめます。Express とは、Node.js の Web アプリケーションフレームワークです。Express の特徴としては、以下のようなものが挙げられます。 素の Node.js からのカスタマイズ性が低いため、使いやすい 比較的容量が小さい 素の Node.js よりも記述量を大幅に減らすことができる &emsp;上記の特徴の中でも、個人的に一番初めの特徴が魅力的だと思います。素の Node.js と書き方が大きくは変わらないため、ゼロから使い方を覚えるという必要がなく、導入コストが比較的小さいです。 &emsp;次の項目では、Express のアプリケーション作成に必要なソフトウェアのインストール方法（導入方法）について説明したいと思います。 インストール方法（導入方法）&emsp;まず、Express をインストールするにあたって Node.js と npm がインストールされていることが前提となります。まだ、Node.js・npm のインストールをしていない方は、前回の記事からインストールを行いましょう。 前回の記事は ↓【Node.js】Node.js・npm とは インストール方法まで解説 （※この記事では、Express アプリケーションのひな型を作成するために必要な Express Generator のインストール方法について解説しています。） &emsp;まずは、ディレクトリを作成し、その中で、Express のアプリケーションを作成するために必要な Express Generator をインストールします。 12mkdir express-appcd express-app （ディレクトリ名を例として、「express-app」としています。） 1npm install express-generator -g オプション-g をつけて、グローバル環境にインストールします。 &emsp;次に、Express アプリケーションを作成します。以下のコマンドを実行します。 1express –view=ejs アプリケーション名 （ここでは、例として、アプリケーション名を「ex-app」としています。） 1express --view=ejs ex-app &emsp;このコマンドを実行し、以下のようなメッセージがターミナル上に表示されれば、アプリケーションの作成に成功しています。 その後、cd コマンドで ex-app に移動し、必要なパッケージをインストールしておきます。 12cd ex-appnpm install &emsp;作成したアプリケーションのディレクトリ構造は以下のようになっています。 各フォルダの説明を簡単にしておきます。 bin フォルダ&emsp;アプリケーションを動かすためのコマンドファイル www 格納されているフォルダです。 public フォルダ&emsp;公開する用のフォルダです。このフォルダには、images, javascript, stylesheet フォルダが格納されています。 routes フォルダ&emsp;ルーティングを行うためのフォルダです。デフォルトでは、index.js と users.js が用意されており、各アドレスにアクセスしたときに行う処理がそれぞれ記述されています。アプリケーション作成の際に適宜ファイルを追加し、ルーティングを行いましょう。 views フォルダ&emsp;テンプレートファイルが格納されています。デフォルトでは、index.ejs と error.ejs が用意されています。 &emsp;ここで、先ほど作成したアプリケーションを web ブラウザで確認してみましょう。 以下のコマンドを実行します。 1npm start そして、 http://localhost:3000/にアクセスしましょう。以下のような画面が確認できるはずです。 &emsp;次の項目では、この画面がどのように表示されているのかをソースコードを見背ながら説明したいと思います。 index.js&emsp;先ほどローカルホストにアクセスした際の画面がどのように表示されていたのかを説明するために、まずは、routes フォルダの index.js を見てみましょう。ソースコードでどんな処理が書かれているのかを説明したいと思います。 123456789var express = require(&quot;express&quot;);var router = express.Router();/* GET home page. */router.get(&quot;/&quot;, function (req, res, next) { res.render(&quot;index&quot;, { title: &quot;Express&quot; });});module.exports = router; &emsp;ここでは、まず、require メソッドで express モジュールをロードし、ルーティングをを行うために、Router メソッドを呼び出します。 &emsp;次に、get メソッドを使い、/にアクセスした際の処理を書きます。引数はリクエストとレスポンスを表す req, res にします。（ここで、req は使いませんが）render メソッドで、レンダリングを行います。render メソッドでは、第一引数として、views フォルダのテンプレートファイル名を、第二引数として、そのファイルに渡すデータのオブジェクトを設定します。 GET・POST について知識がない方は、以下の記事をご覧ください ↓GET と POST の違い &emsp;最後に、このファイルで行ったことを他のファイルでも扱えるようにするために、モジュール化・エクスポートを行います。&emsp;次の項目では、render メソッドで渡されたオブジェクトが views フォルダの index.ejs でどのように使われているのかを見ていきます。 index.ejs&emsp;次に、index.ejs の中身を見ていきます。HTML に理解のある方なら、見やすいものになっています。 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/stylesheets/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; &emsp;このファイル内には、&lt;%= title %&gt;というコードが title、h1, p タグにあることが分かります。このとき、title には、先ほど、index.js で渡したオブジェクト{ title: 'Express' }が使用されています。そのため、ローカルホストにアクセスしたときの画面では、各部分がちゃんと Express と表示されています。 &emsp;以上がローカルホストにアクセスしたときの画面がどのように表示されていたのかについて説明になります。 最後に&emsp;次回以降の記事では、Post メソッドを使ったフォームの作り方についてまとめたいと思います。 Node.js シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 参考 API リファレンス - Express 4.x Express のアプリケーション生成プログラム - Express.js","link":"/2020/09/18/%E3%80%90Node-js%E3%80%91Express%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%EF%BD%9E%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%EF%BC%88Express-Generator%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%EF%BC%89%EF%BD%9E/"},{"title":"【Node.js】Expressで簡単なフォームをつくろう","text":"はじめに&emsp;今回は、Node.js のフレームワークである Express を使って簡単なフォームを作る方法についてまとめたいと思います。 &emsp;このブログの Node.js シリーズは、Node.js を触ったことのない筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。そのため、Node.js についてまったく知らない方も読みやすい内容になっています。 今回の記事を読む前に、前回の Node.js シリーズの記事を読むと理解が早いでしょう. 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 目次 完成イメージ・フォームの機能・ディレクトリ構造 form.ejs form.js app.js ひとこと Node.js シリーズ 参考 完成イメージ・フォームの機能・ディレクトリ構造&emsp;まず、今回作るフォームの完成イメージを見てみましょう。 【データ送信 前 画面】 【データ送信 後 画面】 &emsp;次に、このフォームの機能を説明します。このフォームは、テキストフィールドに何か記入して送信すると、送られた情報を含むメッセージがテキストフィールドの上に表示されるようになっています。 &emsp;最後に、このフォームを作るプロジェクトのディレクトリ構造について説明します。ディレクトリ構造は以下のようになっています。（一部省略） ex-app&emsp; ├─ node_modules&emsp; ├─ public&emsp; ├─ routes&emsp; │&emsp;&emsp;└─ form.js&emsp; ├─ views&emsp; │&emsp;&emsp;└─ form.ejs&emsp; └─ app.js &emsp;Express では、クライアントから送信されたデータを取得するために、Body Parser というパッケージを利用します。通常、このパッケージは Express Generator でアプリケーションのひな型を作成する際に、付属していますが、バージョンが古いと別途インストールする必要があります。 Body Parser の該当コードは以下です。ex-app\\node_modules\\express\\lib\\express.js 12345var bodyParser = require(&quot;body-parser&quot;);exports.json = bodyParser.json;exports.query = require(&quot;./middleware/query&quot;);exports.static = require(&quot;serve-static&quot;);exports.urlencoded = bodyParser.urlencoded; form.ejs&emsp;まずはじめに、EJS のテンプレートファイルを見てみましょう。 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;ja&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&quot; crossorigin=&quot;anonymous&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/express-app/ex-app/public/stylesheets/style.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h3&gt;フォームの作り方&lt;/h3&gt; &lt;p class=&quot;content&quot;&gt;&lt;%- content %&gt;&lt;/p&gt; &lt;form action=&quot;/form/post&quot; method=&quot;POST&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; class=&quot;form-control&quot; id=&quot;msg&quot; placeholder=&quot;何か記入してください&quot; /&gt; &lt;/div&gt; &lt;input type=&quot;submit&quot; value=&quot;送信&quot; class=&quot;btn btn-primary&quot; /&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; &emsp;非常にシンプルなコードです。form タグでは、POST 送信するために、method=”post”とし、input タグでは、データを取得するために、name=”message”としておきます。 &emsp;js ファイルからオブジェクトデータを受け取り、title、content が更新されるようになっています。フォームから POST 送信されたデータをどう処理するのかを form.js に記述します。 &emsp;ちなみに、スタイリングは Bootstrap を利用しています。（詳しい説明は省きます。）Bootstrap についてもっと知りたい方は、以下の記事をご覧ください。 【JavaScript】Bootstarp・Font Awesome を使って Todo リストを作ってみた form.js&emsp;次に、js ファイルを見てみましょう。このファイルでは、form.ejs から送信されたデータの処理を記述します。 1234567891011121314151617181920212223const express = require(&quot;express&quot;);const router = express.Router();router.get(&quot;/&quot;, (req, res) =&gt; { const data = { title: &quot;フォーム送信&quot;, content: &quot;フォームに何か記入して送信しよう&quot;, }; res.render(&quot;form&quot;, data);});router.post(&quot;/post&quot;, (req, res) =&gt; { const msg = req.body.message; const data = { title: &quot;フォーム送信&quot;, content: &quot;「 &quot; + msg + &quot; 」の送信に成功です!!&quot;, }; res.render(&quot;form&quot;, data);});module.exports = router; &emsp;まず、require メソッドで express モジュールをロードし、ルーティングをを行うために、Router メソッドを呼び出しましておきます。 GET メソッド &emsp;まずは、GET メソッドです。メソッド内では、はじめに、form.ejs に渡すオブジェクトの data を作成します。次に、render メソッドでレンダリングします。 POST メソッド &emsp;次に、POST メソッドです。メソッド内では、はじめに、 1const msg = req.body.message; によって、name 属性の値として、message を持つものフォームから値を取得します。req.body とは、Express の req オブジェクトで提供されているリクエストボディの内容を取得することができるプロパティです。 &emsp;次に、form.ejs に渡すオブジェクトの data を作成します。ここで、 1content: &quot;「 &quot; + msg + &quot; 」の送信に成功です!!&quot;, とし、req.body で取得した値をオブジェクトにし、render メソッドでレンダリングします。 &emsp;最後にエクスポートします。 1module.exports = router; &emsp;GET・POST メソッドについて知りたい人は、以下の記事をご覧ください。 GET と POST の違い app.js&emsp; app.js を修正して、任意のアドレスにアクセスした際の処理を追加します。 12var form = require(&quot;./routes/form&quot;);app.use(&quot;/form&quot;, form); &emsp;一行目の処理では、さきほどモジュール化したものをロードしています。二行目は、'/form'にアクセスした際に、form.js を実行するようにしています。 以上が、Express を使って簡単なフォームを作ることについて説明です。 ひとこと&emsp;フレームワークを使わずにフォームを作ろうとするとめんどくさいですが、Express を使うと、簡単にフォームを作ることが出来ますね。 Node.js シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 参考 【初心者でも OK】Node+Express で簡単なフォームを実装！ Qiita Body-Parser が Express に express.json()として標準搭載されている話","link":"/2020/09/24/%E3%80%90Node-js%E3%80%91Express%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8D%E3%81%86/"},{"title":"【Node.js】Node.js・npmとは インストール方法まで解説","text":"はじめに&emsp;今回の記事では、Node.js とは何かについてまとめたいと思います。僕は、バックエンド技術として Node.js をこれから学びたいと思っているので、このブログにて Node.js シリーズを自身の学習のアウトプット、復習用メモとして運営していこうと思っています。ゼロからの学習をアウトプットしているため、Node.js について知識が浅い方にも読みやすい内容となっていると思います。 目次 Node.js とは npm とは yarn とは Node.js のインストール方法 最後に Node.js シリーズ 参考 &emsp;ちなみにこれから僕が、Node.js を学ぼうと考えている理由として以下のようなものが挙げられます。 このブログが Node.js をつかって作られている Node.js は現在バックエンドの技術として、Go 言語に続きトレンドである Node.js は JavaScript 環境であり、JavaScript を学んだことがある私が比較的学びやすいと思ったため Node.js とは&emsp;Node.js とは、サーバーサイド JavaScript とも呼ばれる通り、サーバーサイドで動く JavaScript です。通常、JavaScript は web ブラウザ上で動きますが、Node.js は、Google Chrome 搭載のエンジンプログラムである V8 というプログラムで開発されているため、web ブラウザ上ではなく、単独で JavaScript プログラムを実行することが出来ます。 &emsp;Node.js はサーバーサイドで動作するので、Node.js を扱えるようになると、Web サーバーを自分で作ることが出来ます。そのため、web アプリケーションを web サーバーにアップロードしなくとも作成することが出来ます。 &emsp;また、Node.js は、ノンブロッキング I/O（Input/Output）モデルを採用しているため、入力に対して出力をする際に、待ち時間が発生しないため、大量のデータを高速に処理することが出来ます。 Node.js 公式より ブロッキングは、Node.js プロセス内の追加の JavaScript の実行が、 JavaScript 以外の操作が完了するまで待たなければならない場合です。 npm とは&emsp;Node.js について勉強をしていると「npm」という言葉を見ると思います。また、プログラミングを勉強している中で「npm install」というコマンドを実行したことがあると思います。ここでは、その「npm」についてまとめたいと思います。 &emsp;npm(Node Package Manager)とは、Node.js のパッケージを管理するためのものです。パッケージとは、Express, promise, async など、便利な機能が一つにまとめられた配布形態のことです。これらのパッケージについて軽くまとめておきます。 Express&emsp;Express は、Node.js において Web アプリケーション開発を効率的に行えるようにしたフレームワークです。素の Node.js に近い使い方が出来、導入コストが低く使いやすいフレームワークです。 promise&emsp;promise は非同期処理を実装することができるパッケージです。このパッケージによって、非同期処理が簡素にまとまった書き方で書くことが可能になります。（可読性の高いコードが書けるようになります。） async&emsp;async も非同期処理を実装することができるパッケージです。このパッケージによって、複数の非同期処理をフロー制御することが可能になります。 yarn とは&emsp;npm について調べていると、yarn というパッケージマネージャがあることを知りました。この yarn についても調べてみたのでここにまとめたいと思います。 &emsp;yarn とは、FaceBook、Google 社などによって作られたパッケージ管理システムです。yarn は主に、npm の処理速度、一貫性、セキュリティ面の問題の解決を目的として開発されたものです。処理速度は、明確なほど差がついています。 &emsp;これは個人の見解ですが、npm と yarn については、上記のことを知っておくだけで、プログラミングを勉強し、web アプリケーションの開発に挑戦する段階では、これらについて深く知る必要はないでしょう。 Node.js のインストール方法&emsp;ここでは、これまで説明してきた Node.js を実際にインストールする方法について説明します。まずは、Node,js の公式サイトに移動しましょう。 左の推奨版を選択し、自身の環境にあったインストーラをダウンロードします。 画面の説明を読み、「Next」を押して、適宜、同意事項に同意しながらインストールを進めていきましょう。基本的に選択項目はデフォルトのままでよいと思います。 以下のような画面に進んだら、「Install」を押しインストールを行いましょう。 インストールが終了したら、「Finish」を押して、インストーラを閉じましょう。 &emsp;さて、インストールが終了したら、実際に PC にインストールができているかどうかを確認してみましょう。コマンドプロンプトを開きます。そして、次のコマンドを実行します。 1node -version または、version を省略したコマンドの 1node -v を実行します。このコマンドを実行して、Node.js のバージョンが表示されていればインストールが成功しています。私の場合を例として以下に示します。 &emsp;また、Node.js をインストールする際に同時に、npm もインストールされます。（さきほどのインストールの際に選択項目を変更していなければ）以下のコマンドを実行します。 1npm -version または、version を省略したコマンドの 1npm -v このコマンドを実行して、npm のバージョンが表示されていればインストールが成功しています。例として私の画面を以下に示します。 以上でインストールの説明を終了します。 最後に&emsp;今回が Node.js シリーズの初めての記事でしたが、今後も自分の Node.js の学習をこのブログで学習記録として発信したいと考えています。 Node.js シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 参考 Node.js 公式 「Node.js」とは？プログラミング初心者におすすめの入門編！ npm 入門 Yarn：Facebook 発のパッケージマネジャーは npm に代わるスタンダードになるか Node.js をインストールする","link":"/2020/09/16/%E3%80%90Node-js%E3%80%91Node-js%E3%83%BBnpm%E3%81%A8%E3%81%AF-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95%E3%81%BE%E3%81%A7%E8%A7%A3%E8%AA%AC/"},{"title":"【React】簡単なカウントアプリを作ってみた","text":"はじめに&emsp;この記事では、私が React で作ったカウントアプリについてまとめたいと思います。このカウントアプリでは、React の基本的なことが使われて作られているため、React を今日学び始めた人も読める内容になっています。React でカウントアプリを作ったことがある方も復習がてら目を通してもらえると幸いです。 目次 機能・ディレクトリ構造・完成イメージ 実装 メソッドについて スタイルについて 最後に 参考 先日投稿した React で作った Todo アプリについての記事も併せてご覧ください ↓【React】簡単な Todo アプリを作ってみた 機能・ディレクトリ構造・完成イメージ&emsp;このカウントアプリの機能は以下の通りです。 ＋ボタンを押すと、カウントが一つ増える －ボタンを押すと、カウントが一つ減る リセットボタンを押すと、カウントが０になる &emsp;このアプリのディレクトリ構造は以下になります。（一部省略しています） count-react&emsp; ├─ node_modules&emsp; ├─ public&emsp; └─ src&emsp; &emsp;&emsp;├─Components&emsp; &emsp;&emsp;│&emsp;&emsp;&emsp; └─Count.jsx&emsp; &emsp;&emsp;├─ App.css&emsp; &emsp;&emsp;└─ App.jsx &emsp;このカウントアプリはコンポーネントが少ないので、フォルダを作る必要はないかもしれませんが、大きなアプリを開発するときは、コンポーネント用のフォルダ Components をつくることが望ましいでしょう。 &emsp;このアプリの完成イメージは以下の通りです。 実装&emsp;それでは、実際にソースコードを見てみましょう。 &emsp;まずは、App.jsx です。 12345678910111213141516import React, { Component } from &quot;react&quot;;import Count from &quot;./Components/Count&quot;;import &quot;./App.css&quot;;class App extends Component { render() { return ( &lt;div className=&quot;app&quot;&gt; &lt;h1&gt;Count&lt;/h1&gt; &lt;Count /&gt; &lt;/div&gt; ); }}export default App; &emsp;まずは、Count コンポーネントをインポートします。App クラスでは、h1 タグ、Count コンポーネントを返します。 &emsp;次に、Count.jsx です。 123456789101112131415161718192021222324252627282930313233343536373839404142import React, { Component } from &quot;react&quot;;class Count extends Component { constructor(props) { super(props); this.state = { currentCnt: 0, }; } handleCntUp = () =&gt; { this.setState({ currentCnt: this.state.currentCnt + 1, }); }; handleCntDown = () =&gt; { this.setState({ currentCnt: this.state.currentCnt - 1, }); }; handleCntReset = () =&gt; { this.setState({ currentCnt: 0, }); }; render() { return ( &lt;div className=&quot;count&quot;&gt; &lt;h2&gt;{this.state.currentCnt}&lt;/h2&gt; &lt;button onClick={this.handleCntUp}&gt;+&lt;/button&gt; &lt;button onClick={this.handleCntDown}&gt;-&lt;/button&gt; &lt;br /&gt; &lt;button onClick={this.handleCntReset}&gt;reset&lt;/button&gt; &lt;/div&gt; ); }}export default Count; &emsp;コンストラクタで state として、現在のカウント数を表すcurrentCntを 0 に初期化します。ここで注意しなくてはいけないことは、親クラスであるReact.Componetのコンストラクタを継承することです。この継承を行っていないとエラーになってしまいます。 以下のようにして親クラスのコンストラクタを継承しましょう。 1super(props); &emsp;render メソッドの中では、現在のカウント数を h2 で state を props として受け取り、返します。また、＋・－・reset ボタンを button タグで表示します。このとき、onClick で各メソッドを登録します。 メソッドについて&emsp;各ボタンに登録されているメソッドについて説明します。handleCntUp&emsp;setStateによって state の currentCnt の値を１だけ増やします。 handleCntDown&emsp;setStateにって state の currentCnt の値を１だけ減らします。 handleCntReset&emsp;setStateにって state の currentCnt の値を０にします。 &emsp;これらのメソッドはアロー関数で記述しています。メソッド記法で書くと、bind する必要があります。 スタイルについて&emsp;App.css では、カウントアプリ見やすいように位置だけ調整しています。 1234.app { text-align: center; margin-top: 30px;} &emsp;以上でカウントアプリの説明を終わります。 最後に&emsp;次回の React の記事では、Material-UI を使ってこのカウントアプリを加工したいと考えています。 参考コンポーネントに関数を渡す – React","link":"/2020/09/19/%E3%80%90React%E3%80%91%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"【React】簡単なTodoアプリを作ってみた","text":"はじめに&emsp;今回は、JavaScript のライブラリである React を使用して作った Todo アプリについてまとめたいと思います。このアプリでは、Bootstrap や Font Awesome、UUID（Universally Unique Identifier）も使用しています。 目次 完成イメージ ディレクトリ構造とコンポーネントについて Todo アプリの機能 コンポーネントのソースコード 感想 参考 完成イメージ&emsp;今回作成した Todo アプリは以下のようなものになります。 ＜ Todo アイテム未登録状態＞ ＜ Todo アイテム登録状態＞ ディレクトリ構造とコンポーネントについて今回作成した Todo アプリのディレクトリ構造は以下のようになります。（一部省略しています） todo-react&emsp; ├─ node_modules&emsp; ├─ public&emsp; └─ src&emsp; &emsp;&emsp;├─Components&emsp; &emsp;&emsp;│&emsp;&emsp;&emsp; ├─TodoInput.jsx&emsp; &emsp;&emsp;│&emsp;&emsp;&emsp; ├─TodoList.jsx&emsp; &emsp;&emsp;│&emsp;&emsp;&emsp; └─TodoItem.jsx&emsp; &emsp;&emsp;└─ App.jsx コンポーネントは以下のようになっています。 Todo アプリの機能&emsp;今回作成した Todo アプリには以下のような機能があります。 フォームに Todo を記入して、Enter を押すと、Todo アイテムが登録される。 Todo アイテムのチェックボタンを押すと、Todo アイテムが削除される。 ごみ箱ボタンを押すと、登録されている Todo アイテムがすべて削除される。 コンポーネントのソースコード&emsp;まずは、TodoItem.jsx です。このコンポーネントは各 Todo アイテムを表示するためのものです。 1234567891011121314151617181920import React, { Component } from &quot;react&quot;;export default class TodoItem extends Component { render() { const { title, handleDelete } = this.props; return ( &lt;li className=&quot;list-group-item text-capitalize d-flex justify-content-between my-2&quot; &gt; &lt;h6&gt;{title}&lt;/h6&gt; &lt;div className=&quot;todo-icon&quot;&gt; &lt;span className=&quot;mx-2 text-success&quot; onClick={handleDelete}&gt; &lt;i className=&quot;fas fa-check&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/li&gt; ); }} &emsp;props としてtitle, handleDeleteを受け取ります。チェックボタンには、削除機能のためのhandleDeleteを onClick で登録しています。 &emsp;TodoInput.jsx です。このコンポーネントは Todo の内容を記入するためのフォームを表示するためのものです。 1234567891011121314151617181920212223242526272829import React, { Component } from &quot;react&quot;;export default class TodoInput extends Component { render() { const { item, handleChange, handleSubmit } = this.props; return ( &lt;div className=&quot;card card-body my-3&quot;&gt; &lt;form onSubmit={handleSubmit}&gt; &lt;div className=&quot;input-group&quot;&gt; &lt;input type=&quot;text&quot; className=&quot;form-control text-autoCapitalize&quot; placeholder=&quot;new todo&quot; value={item} onChange={handleChange} /&gt; &lt;div className=&quot;input-group-append btn-primary&quot;&gt; &lt;div className=&quot;input-group-text bg-info text-white &quot;&gt; &lt;i className=&quot;fas fa-pen&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; ); }} &emsp;props としてitem, handleSubmit, handleChangeを受け取ります。テキストボックスには、handleChangeを onChange で登録し、フォームにはhandleSubmitを onSubmit で登録しています。 &emsp;TodoList.jsx です。このコンポーネントは Todo リスト全体を表示するためのものです。 1234567891011121314151617181920212223242526272829303132333435import React, { Component } from &quot;react&quot;;import TodoItem from &quot;./TodoItem&quot;;export default class TodoList extends Component { render() { const { items, clearList, handleDelete, } = this.props; return ( &lt;ul className=&quot;list-group my-5&quot;&gt; {items.map((item) =&gt; { return ( &lt;TodoItem key={item.id} title={item.title} handleDelete={() =&gt; handleDelete(item.id)} /&gt; ); })} &lt;div className=&quot;d-flex&quot;&gt; &lt;button className=&quot;btn btn-danger text-capitalize mt-5 flex-grow-1&quot; type=&quot;button&quot; onClick={clearList} &gt; &lt;i className=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;/ul&gt; ); }} &emsp;まずは、TodoItem コンポーネントを import しましょう。props としてitems, clearList, handleDeleteを受け取ります。テキストボックスには、handleChangeを onChange で登録し、フォームにはhandleSubmitを onSubmit で登録しています。 &emsp;Todo アイテムが格納された配列 items に対して、map メソッドを使いコンポーネントに各プロップスを渡して表示しています。ごみ箱ボタンには、clearListを onClick で登録しています。 map メソッドについては以下から ↓【JavaScript】Map メソッドの使い方 &emsp;最後に、App.jsx です。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import React, { Component } from &quot;react&quot;;import TodoInput from &quot;./Components/TodoInput&quot;;import TodoList from &quot;./Components/TodoList&quot;;import &quot;bootstrap/dist/css/bootstrap.min.css&quot;;import uuid from &quot;uuid&quot;;class App extends Component { state = { items: [], //もともとのTodoアイテムはなし id: uuid(), item: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({ item: e.target.value, }); }; handleSubmit = (e) =&gt; { e.preventDefault(); const newItem = { //新しく追加されるアイテムのidとitemを受け取る id: this.state.id, title: this.state.item, }; const updatedItems = [...this.state.items, newItem]; //スプレッド構文でnewItemを追加する。 this.setState({ items: updatedItems,//スプレッド構文で加工した配列をstateにして、この配列に対して、mapを使う。 item: &quot;&quot;, id: uuid(), }); }; handleDelete = (id) =&gt; { const filteredItems = this.state.items.filter((item) =&gt; item.id !== id); //削除対象のアイテムのidと等しくないidを持つアイテムを変数に格納 = 削除対象のアイテムだけはじく this.setState({ items: filteredItems, //抽出済み配列をstateにセット }); }; handleClear = () =&gt; { this.setState({ items: [], //アイテムを格納する配列を空にする }); }; render() { return ( &lt;div className=&quot;container&quot;&gt; &lt;div className=&quot;row&quot;&gt; &lt;div class=&quot;col-lg-4 col-md-4 col-mt-4&quot;&gt;&lt;/div&gt; &lt;div className=&quot;col-lg-4 col-md-4 col-mt-4&quot;&gt; &lt;h3 className=&quot;text-capitalize text-center&quot;&gt;Todo&lt;/h3&gt; &lt;TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} /&gt; &lt;TodoList items={this.state.items} handleClear={this.handleClear} handleDelete={this.handleDelete} /&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-4 col-md-4 col-mt-4&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ); }}export default App; &emsp;まずは、TodoInput、TodoList コンポーネントを import しましょう。 【state について】&emsp;stateでid, item, itemsを設定します。id には、バッティングしないように uuid を利用しています。items は、Todo アイテムを格納するためのものです。TodoList.jsx で、この配列を map メソッドで操作しています。item は input タグに入力された内容を格納するためのものです。 【メソッドについて】 handleChangeでは、フォーム入力された内容を item にsetStateで登録するという処理を行っています。 handleSubmitでは、まず、 preventDefault()でフォームから送信された際に行われるリロードを排除します。次に、配列 items の最後尾の要素となるnewItemを作成し、スプレッド構文を用いて、これまで登録された Todo アイテムの配列 items と結合し、配列updatedItemsに格納します。最後に、setState で state を更新します。このとき、作成したupdatedItemsを items として設定します。 handleDeleteでは、items に対して filter メソッドを使用して、items から削除対象の Todo アイテムの id を持つ要素を取り除きます。これによって抽出された配列をsetStateで設定します。 &emsp;Filter メソッドについては以下から ↓【JavaScript】filter メソッドの使い方 handleClearでは、setState によって Todo アイテムが登録されている配列 items を空にする処理を行います。 【スタイルについて】&emsp;レイアウトは Bootstrap のグリッドシステム、フレックスによってある程度整えています。また、ボタンの色も Bootstrap を利用して指定しています。アイコンは、Font Awesome を利用しています。 Bootstrap・Font Awesome については以下から ↓【JavaScript】Bootstarp・Font Awesome を使って Todo リストを作ってみた 感想&emsp;今回は、React を作って Todo アプリを作りましたが、難しいと感じました。今後も引き続き勉強を頑張りたいです。 参考 uuid - npm React Course - Todo List Project JS のスプレッド構文を理解する React 公式ドキュメント～リストと key ～ 日本一わかりやすい React 入門#5…コンポーネントの state の設定・取得・変更","link":"/2020/09/13/%E3%80%90React%E3%80%91%E7%B0%A1%E5%8D%98%E3%81%AATodo%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"【React】Material-UIを使ってカウントアプリを作ってみた","text":"はじめに&emsp;この記事では、Material-UIとはなんなのか、特徴からその使い方までを前回作った React のカウントアプリをカスタマイズすることによって説明したいと思います。 &emsp;前回作った React カウントアプリについては以下の記事で、まとめられています。 【React】簡単なカウントアプリを作ってみた この記事の内容 Material-UI の概説 Material-UI の簡単な使い方 使ってみた感想 目次 Material-UI とは？ どんなものが提供されているか 使用例（カウントアプリのボタン） Material-UI の使い方 使ってみた感想・まとめ 最後に 関連記事 参考 （※前回作ったカウントアプリのボタン部分のみに Material-UI を使っているだけです。） Material-UI とは？&emsp;Material-UI とは、JavaScript のライブラリであるReact のコンポーネントライブラリです。このライブラリは Google 社が開発したものであり、NASA、Amazon、UNIQLO など多くの企業で使用されています。このライブラリで提供される UI は、どれもマテリアルデザインが採用されており、デザイン性に優れています。そのため、各 UI のデザインを一から考える必要がなくフロントエンド開発の速度を高めることが可能です。 どんなものが提供されているか&emsp;このライブラリで主に提供されているものをざっと挙げます。 レイアウトに関するも&emsp; &emsp;→ グリッド、コンテナ、ボックス、 入力に関するもの&emsp; &emsp;→ ボタン、チェックボックス、テキストフィールド、ドロップダウンリスト ナビゲーションに関するもの&emsp; &emsp;→ ボトムナビゲーション、パンくずリスト、タブ、リンク などが提供されています。上記のもの以外にも多くのものが提供されており、非常に素材が豊富です。フロントエンド開発に必要なものがほぼすべて提供されていると思ってよいでしょう。 使用例（カウントアプリのボタン）&emsp;Material-UI のボタンコンポーネントを使用した例を見てみたいと思います。まずは、使用する前のカウントアプリの見た目です。＜使用前＞ &emsp;次に、＋・－・reset ボタンに Material-UI を使用した見た目です。＜使用後＞ &emsp;よりボタンっぽくなり、押したくなる見た目をしていますね。クリックした際に簡単なアニメーションもつけられており、押した感が演出されています。 Material-UI の使い方&emsp;では、実際に Material-UI を使ってみましょう。まずは、Material-UI をインストールします。方法は二つあります。 &emsp;一つ目は、npm でパッケージをインストールする方法です。以下のコマンドをプロジェクト直下で実行します。 1npm install @material-ui/core &emsp;二つ目は、CDN（Content Delivery Network）を利用する方法です。以下のタグをコードに挿入します。 1&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap&quot; /&gt; &emsp;この記事では、一つ目の方法で Material-UI をインストールすることにします。 &emsp;実際にコードを見てみます。このコードは前回の React の記事を加工したものです。 Count.jsx 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import React, { Component } from &quot;react&quot;;import { Button } from &quot;@material-ui/core&quot;;class Count extends Component { constructor(props) { super(props); this.state = { currentCnt: 0, }; } handleCntUp = () =&gt; { this.setState({ currentCnt: this.state.currentCnt + 1, }); }; handleCntDown = () =&gt; { this.setState({ currentCnt: this.state.currentCnt - 1, }); }; handleCntReset = () =&gt; { this.setState({ currentCnt: 0, }); }; render() { return ( &lt;div className=&quot;count&quot;&gt; &lt;h2&gt;{this.state.currentCnt}&lt;/h2&gt; &lt;Button size=&quot;small&quot; variant=&quot;contained&quot; color=&quot;secondary&quot; style={{ margin: &quot;5px&quot;, fontSize: &quot;20px&quot;, padding: &quot;0&quot; }} onClick={this.handleCntUp} &gt; + &lt;/Button&gt; &lt;Button size=&quot;small&quot; variant=&quot;contained&quot; color=&quot;primary&quot; style={{ margin: &quot;5px&quot;, fontSize: &quot;20px&quot;, padding: &quot;0&quot; }} onClick={this.handleCntDown} &gt; - &lt;/Button&gt; &lt;br /&gt; &lt;Button size=&quot;medium&quot; variant=&quot;contained&quot; onClick={this.handleCntReset} style={{ margin: &quot;5px&quot;, width: &quot;135px&quot; }} &gt; reset &lt;/Button&gt; &lt;/div&gt; ); }}export default Count; &emsp;まずは、使いたいコンポーネントを import します。今回はボタンコンポーネントです。 1import { Button } from &quot;@material-ui/core&quot;; &emsp;次に、Button タグを書きます。Material-UI のサイトからコピペしましょう。&lt;&gt;を押せば、コードが出現します。（下画像参照） &emsp;今回は、＋ボタンをsecondary、－ボタンをprimary、reaet ボタンをdefaultにしています。+ボタンを例にして説明します。 123456789&lt;Button size=&quot;small&quot; variant=&quot;contained&quot; color=&quot;secondary&quot; style={{ margin: &quot;5px&quot;, fontSize: &quot;20px&quot;, padding: &quot;0&quot; }} onClick={this.handleCntUp}&gt; +&lt;/Button&gt; &emsp;タグの属性として、size、color を任意の値で設定すると、ボタンの大きさ、ボタンの色を決めることが出来ます。決められる大きさは small、medium、large を指定できます。色は、default、primary、secondary、disabled を指定することで変更が出来ます。 &emsp;また、ここでは、スタイルの記述量が極めて少ないため、タグ内で style 属性によって指定しています。 &emsp;なお、上記の Material-UI から提供されているボタンをwithStyles、makeStyles、makeStylesによって独自にカスタマイズすることも可能です。（この記事では説明を省略します。） 使ってみた感想・まとめ&emsp;まず、Material-UI は非常に便利だと思いました。Material-UI を使えば、自分でデザインを考えなくてもよいため、開発速度が向上します。また、マテリアルデザインを採用しているため、デザイン性が担保されており、万人受けするデザインだと思います。 &emsp;しかし、Material-UI は React のコンポーネントライブラリということもあって React の使い方を理解していないと使用することが難しいと思いました。僕も React は勉強中であるため、開発中にエラーを出してしまいました。React についての理解を深め、Material-UI を使いこなせるように努めたいと思います。みなさんもぜひ使ってみてください。 最後に&emsp;次回以降の記事では、Material-UI についてより実践的な使い方の記事を書きたいと思います。 関連記事 【React】簡単なカウントアプリを作ってみた 【React】簡単な Todo アプリを作ってみた 参考 Material-UI 公式","link":"/2020/09/22/%E3%80%90React%E3%80%91Material-UI%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"そもそもBlogとは？","text":"こんにちは、Yuuuki です。この記事では、そもそも Blog って何？ということについて書いていきます。 はじめに&emsp;あるとき、「そもそも Blog って何だろう」と思いました。そこで、ネットで Blog について調べてみました。 Blog とは&emsp;Blog とは、『覚え書きや論評などを記すウェブサイトである。「Web に Log する」のウェブログ (weblog) をブログ（Blog）と略称する。』(Wikipedia より)というものらしいです。&emsp;Blog って weblog の略称だったんですね。初めて知った！ブログといっても、趣味ブログ、ビジネスブログ、技術ブログなど様々な種類がありますよね。&emsp;ブログには、収益を得るためであったり、勉強の記録のためであったり、筆者に応じて様々な目標がありますね。&emsp;このブログでは、このブログの初めての記事でも述べたような目的のもと執筆しています。 参考までに ↓ 初投稿！！ ということで「Blog ってそもそも何？」、気になったので調べてみたでした。それでは、次回の記事で 参考 Blog とは何か ブログ（Wikipedia）","link":"/2020/08/29/%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82Blog%E3%81%A8%E3%81%AF%EF%BC%9F/"},{"title":"大学生のレポート作成時にWordで役立つショートカットキー","text":"はじめに&emsp;俺的大学生がレポートを作成する際に Word で役立つショートカットまとめです。これを見て大学生の読者はレポート作成効率を爆上げしましょう！ Ctrl + A&emsp;文章全選択 今押して試してみよう Ctrl + C&emsp;選択部分のコピー Ctrl + V&emsp;コピーしたものをペースト（貼り付け） Ctrl + X&emsp;カット（切り取り）&emsp;Ctrl + C、Ctrl + V、Ctrl + X をよく組み合わせて使いますね Ctrl + Z&emsp;一つ前の状態に戻る。 Ctrl + Y&emsp;前の動作をやり直す&emsp;Ctrl + Z とよく合わせて使いますね。誤って一つ前の状態へ戻ってしまっても、Ctrl + Y でやり直すことが出来ます。 Ctrl + S&emsp;上書き保存する。 Ctrl + Shift + S&emsp;名前を付けて保存する。 Home&emsp;カーソルを行の先頭に移動させる。&emsp;カーソルを矢印キー（↑ ↓ ← →）で移動させるのはもうやめよう。 End &emsp;カーソルを行の末に移動させる。&emsp;Home と同様に便利なショートカットですね。 Ctrl + B&emsp;選択部分を太字にする。 Ctrl + U&emsp;選択部分に下線を引く Shift + ↑ ↓ ← →&emsp;選択部分の変更&emsp;選択部分を矢印キーに応じて変更できます。 Ctrl + Shift + &lt;&emsp;選択部分のフォントの大きさを一段階上げる。 Ctrl + Shift + &gt;&emsp;選択部分のフォントの大きさを一段階下げる。 Ctrl + Shift + F&emsp;フォント変更ウィンドウを出す。 最後に&emsp;私はこれらのショートカットキーを覚えたら、レポートの作成効率が飛躍的に上がりました。みなさんも徐々にこれらのショートカットを使いながら覚え、レポート作成の効率を上げてみましょう。将来、Word で文書を作成する際にもきっと役立つショートカットばかりだと思います。&emsp;それでは、また次の記事で","link":"/2020/08/31/%E5%A4%A7%E5%AD%A6%E7%94%9F%E3%81%AE%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABWord%E3%81%A7%E5%BD%B9%E7%AB%8B%E3%81%A4%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%82%AD%E3%83%BC/"},{"title":"【Node.js】ExpressからMySQLに接続しよう","text":"はじめに&emsp;今回の記事では、Node.js のフレームワークである Express からデータベースである MySQL に接続する方法についてまとめたいと思います。 &emsp;このブログの Node.js シリーズは、Node.js を触ったことのない筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。そのため、Node.js についてまったく知らない方も読みやすい内容になっています。 目次 Node.js シリーズ 対象読者・使用技術 MySQL とは 実装するもの・ディレクトリ構造 index.js について index.ejs について エラー対応 ひとこと Node.js シリーズ 参考文献 これまでの Node.js シリーズも併せてご覧ください。↓ Node.js シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 【Node.js】Express で簡単なフォームをつくろう 対象読者・使用技術【この記事の対象読者】 Express、MySQL に触れたことがあるが、接続方法が分からない人 これから、Express と MySQL を使って Web アプリケーションを作りたい方 【この記事での使用技術】 Node.js v12. 16. 1 Express MySQL Ver 8.0.21 for Win64 on x86_64 MySQL とは&emsp;このブログの Node.js シリーズでは、データベース（MySQL）を初めて触ることになります。そこで、MySQL とは何なのかを少しまとめたいと思います。 &emsp;MySQL とは、データベース管理システムのひとつです。このデータベースは、オープンソースなリレーショナルデータベースです。大量のデータを管理することが出来、高速に動作することができ、世界中の多くの企業で使用されています。そのため、この MySQL を学ぶことは将来 web 系エンジニアになるために、有意義なものでしょう。 &emsp;ちなみに、MySQL という名前は、主製作者である「ミカエル・ウェデニウス（Michael Widenius）」の娘の名前である「My」と、SQL（Structured Query Language）を組み合わせて作られたものそうですよ。 実装するもの・ディレクトリ構造&emsp;この記事で Express と MySQL を使って実装するものを見てみましょう。今回は、以下のテーブル（コマンドプロンプトのスクショ）を画面に出力するということを実現します。 【テーブル：vegetavbles】 &emsp;このテーブルは、id, name, color の３つのカラム、３つの野菜のレコードを持っています。 【出力後の画面】 今回作成するもののディレクトリ構造は以下のようになります。 mysql-express-app&emsp; ├─ node_modules&emsp; ├─ views&emsp; │&emsp;&emsp;└─ index.ejs&emsp; ├─ index.js&emsp; ├─ package-lock.json&emsp; └─ package.json &emsp;次の項目では、index.js について実際のソースコードを見て実装内容を説明します。 index.js について&emsp;実際に index.js のソースコードを見てみましょう。 123456789101112131415161718192021const express = require(&quot;express&quot;);const mysql = require(&quot;mysql&quot;);const app = express();const connection = mysql.createConnection({ host: &quot;localhost&quot;, user: &quot;root&quot;, password: &quot;**********&quot;, database: &quot;node_items&quot;,});app.get(&quot;/&quot;, (req, res) =&gt; { connection.query(&quot;SELECT * FROM vegetables&quot;, (error, results) =&gt; { res.render(&quot;index.ejs&quot;, { vegetables: results }); });});app.listen(3000, () =&gt; { console.log(&quot;Running server on port 3000&quot;);}); &emsp;まずは、Express, MySQL をインストールし、require メソッドでモジュールをロードします。以下のコマンドを実行し、それぞれインストールしましょう。（EJS もインストールします） 1npm install express mysql ejs モジュールは扱いやすいようになるべくわかりやすい名前でロードしましょう。 12const express = require(&quot;express&quot;);const mysql = require(&quot;mysql&quot;); また、Express のアプリケーションオブジェクトを作成します。 1const app = express(); 次に、データベースへの接続を行います。 123456const connection = mysql.createConnection({ host: &quot;localhost&quot;, user: &quot;root&quot;, password: &quot;**********&quot;, database: &quot;node_items&quot;,}); &emsp;パッケージ mysql の createConnection メソッドを使ってデータベースとの接続を行います。このメソッドには、データベースのhost user password databaseの情報をオブジェクトとして渡しましょう。（ここでは、パスワードを伏字にしています。各種情報も自身のものに適宜変更しましょう。）扱いやすいように、変数 connection に格納します。 &emsp;get メソッドを使い、ルーティングの設定を行います。 12345app.get(&quot;/&quot;, (req, res) =&gt; { connection.query(&quot;SELECT * FROM vegetables&quot;, (error, results) =&gt; { res.render(&quot;index.ejs&quot;, { vegetables: results }); });}); &emsp;ここでは、query メソッドを使い、SQL 文を実行し、レンダリングを行います。この query メソッドは、第一引数に SQL 文を受け取り、第二引数にこの SQL 文を実行した後の処理を受け取ります。 &emsp;第一引数は、「SELECT * FROM vegetables」とします。SELECT 文を用いて、テーブル vegetables から、データをすべて取得します。 &emsp;第二引数では、render メソッドを使い、index.ejs のレンダリングを行います。このとき、オブジェクトを渡します。results に SQL 文の実行結果が格納されます。 &emsp;最後に、待ち受け処理を行います。 123app.listen(3000, () =&gt; { console.log(&quot;Running server on port 3000&quot;);}); 次の項目では、views フォルダの index.ejs について見てみましょう。 index.ejs について&emsp;index.ejs は以下になります。 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;MySQL + Express&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;野菜&lt;/h1&gt; &lt;div&gt; &lt;ul class=&quot;table-body&quot;&gt; &lt;% vegetables.forEach((item) =&gt; { %&gt; &lt;li&gt; &lt;div class=&quot;item-data&quot;&gt; &lt;span&gt;&lt;%= item.id %&gt;&lt;/span&gt; &lt;span&gt;&lt;%= item.name %&gt;&lt;/span&gt; &lt;span&gt;&lt;%= item.color %&gt;&lt;/span&gt; &lt;/div&gt; &lt;/li&gt; &lt;% }); %&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; &emsp;シンプルなコードだと思います。ul タグについて見てみましょう。ここでは、forEach メソッドを利用して、データを出力します。SELECT 文で取得したデータに関して、id, name, color を表示します。このとき、&lt;% %&gt;, &lt;%= %&gt;の書き間違えに注意しましょう。 &emsp;それでは、 1node index.js &emsp;コマンドを実行してhttp://localhost:3000にアクセスして画面を確認してみましょう。 エラー対応&emsp;コードを書き終えて、ターミナル上で以下のコマンドを実行しても MySQL の version によってエラーが発生し、画面を確認できない場合があります。 &emsp; MySQL v8.0 を使用している場合、以下のようなエラーが発生することがあります。僕はこのエラーに苦しみました、、、 1ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client &emsp;このエラーは、データベースに接続する際に、パスワードが上手く認証されないことが原因で起こるものです。以下のコマンドを、MySQL コマンドラインで実行しましょう。 1ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password' &emsp;このとき、root、localhost、password は利用したいデータベースの情報に変更しましょう。 以上で、実装の説明終わります。最後まで読んでいただき、ありがとうございます。 ひとこと&emsp;MySQL への接続方法を身に付けると、だいぶ開発の幅が広がりそうです。今後も、Express と MySQL についての記事を出していこうと考えています。 Node.js シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 【Node.js】Express で簡単なフォームをつくろう 参考文献 Node.js で MySQL を使うメモ エラー対応","link":"/2020/09/28/%E3%80%90Node-js%E3%80%91Express%E3%81%8B%E3%82%89MySQL%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%97%E3%82%88%E3%81%86/"},{"title":"【React】カウントアプリでuseStateを使ってみた","text":"はじめに&emsp;今回は、Hook の useState を使って作ったカウントアプリについてまとめたいと思います。 &emsp;このブログ Yuuuki-Blog の React シリーズは、React の勉強中である筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。そのため、React の初学者の方にも読みやすい内容になっています。 目次 Hook とは？ useState とは？ 完成イメージ・使用技術・ディレクトリ構造 App.jsx CountButton.jsx useState の使い方 関数について ひとこと 関連記事 参考文献 これまでの React シリーズ ↓ 【React】簡単なカウントアプリを作ってみた 【React】簡単な Todo アプリを作ってみた 【React】Material-UI を使ってカウントアプリを作ってみた Hook とは？ useState とは？&emsp;この項目では、Hook、useState についてまとめたいと思います。Hook とは、React 16.8 で追加されたクラスを書かずに state などの管理をすることができる機能です。 &emsp;useState とは、Hook の中の機能のひとつです。State を作成、管理するものです。後ほど使い方を見てみたいと思います。Hook には、useState 以外にも、useEffect、useCallback などの機能があります。 &emsp;React 初心者の僕が使ってみたところ、クラスを書かずとも、関数コンポーネント（Functional Components）に状態を持たせることが出来、それが簡単に管理できることが非常に便利だと思いました。 完成イメージ・使用技術・ディレクトリ構造&emsp;今回作るカウントアプリの完成イメージを見てみましょう。↓ このカウントアプリの機能 +ボタンを押すと、カウントが１だけ増加する。 －ボタンを押すと、カウントが１だけ減少する。 reset ボタンを押すとカウントが０になる。 今回作ったカウントアプリに使った技術 React Hook Material-UI（少しだけ） &emsp;ディレクトリ構造は以下のようになります。create-react-app で作ってます。（一部省略） count-react-hook&emsp; ├─ node_modules&emsp; ├─ public&emsp; ├─ src&emsp; │&emsp;├─ Components&emsp; │&emsp;│&emsp; └─ CountButton.jsx&emsp; │&emsp;├─ App.css&emsp; │&emsp;└─ App.jsx&emsp; ├─ package-lock.json&emsp; └─ package.json &emsp;useState は Components/CountButton.jsx で使用しています。CountButton コンポーネントは以下の部分になります。 App.jsx&emsp;App.jsx のソースコードは以下になります。 12345678910111213141516import React, { Component } from &quot;react&quot;;import CountButton from &quot;./Components/CountButton&quot;;import &quot;./App.css&quot;;class App extends Component { render() { return ( &lt;div className=&quot;app card&quot;&gt; &lt;h1&gt;Count&lt;/h1&gt; &lt;CountButton /&gt; &lt;/div&gt; ); }}export default App; &emsp;非常に簡略なコードです。CountButton コンポーネントを import することを忘れないようにしましょう。 CountButton.jsx&emsp;次に、useState を使っている CountButton.jsx のコードを見てみましょう。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import React from &quot;react&quot;;import { useState } from &quot;react&quot;;import { Button } from &quot;@material-ui/core&quot;;export default function CountButton() { const [count, setCount] = useState(0); const countUp = () =&gt; { setCount(count + 1); }; const countDown = () =&gt; { setCount(count - 1); }; const countReset = () =&gt; { setCount(0); }; return ( &lt;div&gt; &lt;h1&gt;{count}&lt;/h1&gt; &lt;Button size=&quot;small&quot; variant=&quot;contained&quot; color=&quot;secondary&quot; style={{ margin: &quot;5px&quot;, fontSize: &quot;20px&quot;, padding: &quot;0&quot; }} onClick={countUp} &gt; + &lt;/Button&gt; &lt;Button size=&quot;small&quot; variant=&quot;contained&quot; color=&quot;primary&quot; style={{ margin: &quot;5px&quot;, fontSize: &quot;20px&quot;, padding: &quot;0&quot; }} onClick={countDown} &gt; - &lt;/Button&gt; &lt;Button size=&quot;medium&quot; variant=&quot;contained&quot; onClick={countReset} style={{ margin: &quot;5px&quot;, width: &quot;135px&quot; }} &gt; reset &lt;/Button&gt; &lt;/div&gt; );} &emsp;まずは、Hook の useState を import します。 1import { useState } from &quot;react&quot;; &emsp;Material-UI を import します。詳細は省きたいと思います。Material-UI のインストールについて気になる方は以下の記事をご覧ください。 【React】Material-UI を使ってカウントアプリを作ってみた useState の使い方&emsp;次に、useState を使います。 1const [count, setCount] = useState(0); &emsp;useState は、state とその state を更新するための関数をペアにして宣言します。今回は、カウント数を表す count、カウント数を更新する setCount をペアにしています。 &emsp;useState の引数には、state の初期値を設定します。今回は、最初のカウント数である 0 を渡しています。この引数には、文字列、配列等を用いることもできます。State によって使い分けましょう。 &emsp;この useState は、一つのコンポーネント内で複数使うことが出来ます。非常に便利ですね。 関数について&emsp;カウントを更新するために関数について、説明します。 1234567891011const countUp = () =&gt; { setCount(count + 1);};const countDown = () =&gt; { setCount(count - 1);};const countReset = () =&gt; { setCount(0);}; &emsp;カウントをアップ、ダウン、リセットさせる関数の countUp、countDown、countReset を作ります。useState で宣言した setCount を呼び出し、State を更新します。setState と似ていますね。 &emsp;ボタンは、+、－、reset を用意します、ここで Material-UI を少しだけ利用しています。 &emsp;App.css では、margin、padding を整えたり、box-shadow で影をつけているくらいですかね。詳細は省きたいと思います。 以上が、useState を使ったカウントアプリの説明でした。 ひとこと&emsp;僕は、最初に触ったプログラミング言語が Java だったので、関数のことをメソッドと言ってしまいます、、、どっちでもいいと思うけど 関連記事 【React】簡単なカウントアプリを作ってみた 【React】簡単な Todo アプリを作ってみた 【React】Material-UI を使ってカウントアプリを作ってみた 参考文献 公式ドキュメント フックの導入","link":"/2020/10/02/%E3%80%90React%E3%80%91%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7useState%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"【React】画像検索アプリを作ってみた ～fecth API～","text":"はじめに&emsp;今回は、React を使って作った画像検索アプリについてまとめたいと思います。この記事を読むことにより、React Hook の useState、useEffect の使い方、web API のたたき方について学ぶことが出来ます。 &emsp;このブログ Yuuuki-Blog の React シリーズは、React の勉強中である筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。そのため、React の初学者の方にも読みやすい内容になっています。 目次 完成イメージ・ディレクトリ構造 useState による state の設定 useEffect の利用 onSubmit について 画像の描画・スタイリング 関連記事 参考記事 これまでの React シリーズ ↓ 【React】簡単なカウントアプリを作ってみた 【React】簡単な Todo アプリを作ってみた 【React】Material-UI を使ってカウントアプリを作ってみた 【React】カウントアプリで useState を使ってみた 完成イメージ・ディレクトリ構造&emsp;まずはじめに、今回作る画像検索アプリの完成形を見てみましょう。 この画像探索アプリの機能は以下の通りです。 テキストフィールドに探したい画像の単語を入れて送信すると、該当画像が表示される。 デフォルトでは、猫の画像が表示されるようになっている。 &emsp;画像は、unsplashというサイトのものを利用しています。新規登録をして Access キーを入手しておきましょう。なお、この Access キーは他者に共有しないように十分注意しましょう。 &emsp;画像探索アプリのディレクトリ構造は以下のようになっています。create-react-app で作成しています。（一部省略） photo-app&emsp; ├─ node_modules&emsp; ├─ public&emsp; ├─ src&emsp; │&emsp;&emsp;├─ App.css&emsp; │&emsp;&emsp;└─ App.jsx&emsp; ├─ .env&emsp; ├─ .gitignore&emsp; ├─ package-lock.json&emsp; └─ package.json &emsp;今回の画像検索アプリにおいて、おさえたいファイルが .envと.gitignore の二つあります。 &emsp;.env ファイルは、プロジェクトの環境設定を行うファイルです。（env は environment の略でしょうか、、、）unsplash で取得した Acces キーを記入しておきましょう。 &emsp;.gitignore ファイルは、情報の機密性や不要なファイルを共有したくないという点から、git の追跡対象から外したいファイルを記述しておくものです。使い方としては、追跡対象から外したいファイル名を記述するだけです。今回は、他者に知られてはいけない Access キーが書かれている .envを記入します。 useState による state の設定&emsp;state は Hook の useState によって定義しています。 123const [text, setText] = useState(&quot;&quot;);const [images, setImages] = useState([]);const [query, setQuery] = useState(&quot;cat&quot;); &emsp;textには、テキストフィールドに入力された検査ワードの文字列が入ります。 &emsp;imagesには空配列を渡しておきます。この配列には、API を通して持ってきた画像が格納されます。 &emsp;queryには、URL のクエリパラメータの一部となる（＝検索ワードとなる）文字列が格納されます。 useEffect の利用&emsp;useEffect では、第一引数に、コールバック関数としてfecth メソッドを渡して非同期通信を行います。 123456789useEffect(() =&gt; { fetch( `https://api.unsplash.com/search/photos?query=${query}&amp;client_id=${process.env.REACT_APP_CLIENT_ID}` ) .then((response) =&gt; response.json()) .then((data) =&gt; { setImages(data.results); });}, [query]); &emsp;fecth メソッドでは、テキストフィールドから取得され、state の query に設定されているクエリと、unsplash から取得した、Access キーを用いて通信を行います。REACT_APP_CLIENT_ID に、unsplash の Access キーが格納されています。 &emsp;通信が終わり次第、state の images の更新を行います。 &emsp;useEffect の第二引数には、query を渡しておきます。この query が更新されると、コールバック関数である fecth メソッドが実行されます。 &emsp; useEffect では、第一引数にコールバック関数を指定し、第二引数に配列として state を格納しておきます。この state が更新されると、コールバック関数が呼び出されます。 onSubmit について&emsp;ユーザからテキストフィールドに検索ワードが入力され、送信された時に、onSubmit メソッドを呼び出します。 12345const onSubmit = (e) =&gt; { e.preventDefault(); setQuery(text); setText(&quot;&quot;);}; &emsp;ここで、state の query、text を更新します。このとき、フォームが送信された際のブラウザのデフォルト機能であるリロードを機能しないようにしています。ここで、query が更新され、useEffect が呼び出されることになります。 画像の描画・スタイリング&emsp;画像の描画は、配列の state である images に対して、map メソッドを用いることで実装しています。 &emsp;スタイリングに対しては、ボタンやテキストフィールドの見栄えを整え、grid-template-columnsによりグリッドを実装しています。 以上が、画像検索アプリの説明になります。 関連記事 【React】簡単なカウントアプリを作ってみた 【React】簡単な Todo アプリを作ってみた 【React】Material-UI を使ってカウントアプリを作ってみた 【React】カウントアプリで useState を使ってみた 参考記事&emsp;今回の画像探索アプリは、以下の Youtube チャンネルのコードを参考にしています。初学者にとってとても良い学習資料を提供しているので、チャンネル登録することを推奨します。 【プログラミング入門】React で写真検索機能を作ってみよう ~ PART 2（useState &amp; useEffect） ~ Let’s build with React ~ 公式ドキュメント フックの導入 git ignore を使ってファイルを無視する方法【初心者向け】","link":"/2020/10/03/%E3%80%90React%E3%80%91%E7%94%BB%E5%83%8F%E6%A4%9C%E7%B4%A2%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F-%EF%BD%9Efecth-API%EF%BD%9E/"},{"title":"【俺的便利なVScode拡張機能】","text":"はじめに&emsp;今回は、普段僕が使っている VScode の便利な拡張機能を紹介したいと思います。この記事で紹介する拡張機能は、知っているものが多いかと思いますが、知らない方の役に立てば幸いです。 &emsp;この記事で紹介するもの以外で便利な拡張機能をご存じの方がいれば、Twiiter にてぜひ教えていただきたいです。 目次 Japanese Language Pack for Visual Studio Code Prettier indent rainbow Bracket Pair Colorizer 2 Material-icon Theme Auto Rename Tag Git Graph ES7 React/Redux/GraphQL/React-Native snippets 当ブログの人気記事 Japanese Language Pack for Visual Studio Code&emsp;この拡張機能によって VScode を日本語化することが出来ます。日本語が良いかどうかは完全に好みです。 &emsp;ちなみに、僕は入れてます。 Prettier &emsp;この拡張機能は、書いたソースコードのフォーマットを自動で整えてくれるものです。書いたコードを自分で整形することはとても時間がかかり手間ですが、この拡張機能を使うことで、その手間を省くことが出来ます。 &emsp;セーブ時に Prettier が機能するようにしておくことがおすすめです。 indent rainbow &emsp;この拡張機能は、その名の通り、インデントを虹色に色付けしてくれるものです。 &emsp;深さが変わることに、インデントの色が変わるので、コードの可読性が向上します。Prettier と組み合わせることで、効果が上がります。 Bracket Pair Colorizer 2 &emsp;この拡張機能は、ソースコード中の括弧（）を色付けして対応括弧をわかりやすくしてくれるものです。普段コードを書いていると、どの括弧がどの括弧と対応しているか分からなくなることがあると思いますが、この拡張機能によってそのようなことは無くなるでしょう。 Material-icon Theme &emsp;この拡張機能は、ファイルアイコンを分かりやすくいい感じにかっこよくしてくれるものです。この拡張機能以外にも、ファイルアイコンを変えられるものは多くありますが、この拡張機能は、マテリアルデザインを採用しているため、非常に見やすいものになっています。 Auto Rename Tag &emsp;この拡張機能は、開始タグを変更するとき、閉じタグも一緒に変更してくれるもののです。フロントエンド開発をするならぜひインストールしておくべきものでしょう。 Git Graph &emsp;この拡張機能は Git の操作履歴をグラフで視覚的に表してくれるものです。また、コミットメッセージや変更ファイル内の差分も見ることも可能です。 ES7 React/Redux/GraphQL/React-Native snippets &emsp;この拡張機能は、React 開発を行う上で、欠かせないものでしょう。この拡張機能は、プレフィックスを書くことによって、特定の文を書いてくれます。 &emsp;例えば、 1imr と打ち、Enter 押すと 1import React from &quot;react&quot;; と補完してくれます。また、 1rcc と打ち、Enter 押すと 1234567import React, { Component } from &quot;react&quot;;export default class FileName extends Component { render() { return &lt;div&gt;$2&lt;/div&gt;; }} と補完してくれます。他にも、ファンクショナルコンポーネントを生成してくれるプレフィックスなどもあり、実用的です。非常に便利な拡張機能ですね。 以上で今回の記事を終わります。 当ブログの人気記事 【Node.js】Express から MySQL に接続しよう 【React】カウントアプリで useState を使ってみた Hexo とはなにか？始め方の一番分かりやすい解説！！ Hexo テーマ（theme）を icarus へ変更する方法・カスタマイズする方法","link":"/2020/10/06/%E3%80%90%E4%BF%BA%E7%9A%84%E4%BE%BF%E5%88%A9%E3%81%AAVScode%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%80%91/"},{"title":"【React + Node + MySQL】CRUDアプリケーションをつくってみた Part 1","text":"はじめに&emsp;今回の記事では、フロントを React.js、バックを Node.js、Express、データベースを MySQL で作った CRUD アプリケーションについてまとめたいと思います。この Part 1 では、フロントについてまとめたいと思います。 &emsp;当ブログ『Yuuuki Blog』では、筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。React や Node、Hexo についての記事を主に投稿しています。また、大学生ならではの記事も投稿しています。 目次 注意事項 使用技術 アプリの説明・アプリの完成イメージ 機能の説明・ディレクトリ構造 App.jsx From.jsx ひとこと 関連記事 参考記事 注意事項&emsp;この記事で紹介する CRUD アプリケーションは単に CRUD の機能を実装したものです。 &emsp;筆者自身のインプットの質を高めることを目的の一つとして、記事を執筆しています。そのため、アプリの実用性は皆無です。 &emsp;また、CRUD 機能を実装するという趣旨とは外れるため、アプリケーションの見た目にも全く配慮していません。 &emsp;筆者の僕自身プログラミング初学者のため、見苦しいコードも散見されると思います。その場合、Twitter にてご指導いただけると幸いです。 使用技術 Node.js Express React MySQL Axios Cors Body-Parser等 アプリの説明・アプリの完成イメージ&emsp;この CRUD アプリは、野菜の名前、色を登録することができるものです。 &emsp;この CRUD アプリケーションの完成イメージは以下のようになります。 【登録前】 【登録後】 機能の説明・ディレクトリ構造&emsp;この CRUD アプリの機能は以下のようなものです。 テキストボックスに ID・名前・色を入力し、送信すると、DB にアイテムが登録され、上画像のように、登録した野菜アイテムが表示される アイテムの「削除ボタン」を押すと、そのアイテムが DB から削除され、画面からも消える アイテムのテキストボックスに新たな名前・色を入力し、「更新ボタン」を押すとアイテムの内容が更新される &emsp;このアプリのディレクトリ構造は以下の通りです。（一部省略） react-express-app&emsp; ├─ node_modules&emsp; ├─ package.json&emsp; ├─ front-react&emsp; │&emsp;└─ src&emsp; │&emsp;&emsp;├─ App.jsx&emsp; │&emsp;&emsp;└─ Form.jsx&emsp; └─ back-node&emsp; &emsp;&emsp;└─ src&emsp; &emsp;&emsp;&emsp;└─ index.js App.jsx From.jsx&emsp;まずは、App.jsx についてです。 12345678910111213141516import React from &quot;react&quot;;import &quot;./App.css&quot;;import Form from &quot;./Components/Form&quot;;function App() { return ( &lt;div className=&quot;App&quot;&gt; CRUD Application &lt;br /&gt; 野菜 &lt;Form /&gt; &lt;/div&gt; );}export default App; &emsp;非常に簡単なコードです。今回、フォーム部分は Form.jsx に書きました。Form.jsx についても見ていきます。 &emsp;まずは、必要なモジュールを import します。 123import React from &quot;react&quot;;import { useState, useEffect } from &quot;react&quot;;import Axios from &quot;axios&quot;; &emsp;Form は Functional Component とし、useState、useEffect を使用しています。練習したかったので。 &emsp;HTTP 通信を行うために、Axios を import しておきます。 &emsp;次に、state の作成です。useState を使って、state を初期化します。 123456789export default function Form() { const [vegeName, setVegeName] = useState(&quot;&quot;); const [vegeId, setVegeId] = useState(&quot;&quot;); const [vegeColor, setVegeColor] = useState(&quot;&quot;); const [vegeList, setVegeList] = useState([]); const [newName, setNewName] = useState(&quot;&quot;); const [newColor, setNewColor] = useState(&quot;&quot;); &emsp;vegeName、vegeId、vegeColor は、登録する野菜の名前、ID、色を管理するためのものです。 &emsp;vegeList は、登録された野菜アイテムを配列として管理するためのものです。この配列に対して、Map メソッドを使って、野菜アイテムを表示することにしています。 &emsp;newName、newColor は野菜アイテムの Update 時に使用します。野菜アイテムの新たな名前、色を管理します。 &emsp;vegeList は、バックに GET 通信を行い、得られたデータを要素として格納します。これを useEffect により実現しています。初アクセス時に登録済の野菜アイテムを表示します。 123456useEffect(() =&gt; { Axios.get(&quot;http://localhost:3001/get&quot;).then((response) =&gt; { console.log(response.data); setVegeList(response.data); });}, []); &emsp;メソッドについて説明します。1 つ目は、Create 時に呼ばれるメソッドです。 123456789const handleRegist = () =&gt; { setVegeList([...vegeList, { id: vegeId, name: vegeName, color: vegeColor }]); Axios.post(&quot;http://localhost:3001/insert&quot;, { id: vegeId, name: vegeName, color: vegeColor, });}; &emsp;登録する野菜アイテムのデータをオブジェクトとして vegeList に格納します。また、これらのデータを post メソッドで送信します。 &emsp;2 つ目は、野菜アイテムの Delete 時に呼ばれるメソッドです。 123const handleDelete = (vegeId) =&gt; { Axios.delete(`http://localhost:3001/delete/${vegeId}`);}; &emsp;delete メソッドを使い、野菜アイテムの id をパスパラメータとして送信します。 &emsp;3 つ目は、野菜アイテムの Update 時に呼ばれるメソッドです。 123456789const handleUpdate = (vegeId) =&gt; { Axios.put(&quot;http://localhost:3001/update&quot;, { id: vegeId, name: newName, color: newColor, }); setNewName(&quot;&quot;); setNewColor(&quot;&quot;);}; &emsp;put メソッドを使い、更新対象の野菜アイテムの id、更新後の新たな野菜の名前、色を送信します。 &emsp;登録用フォームについてです。 123456789101112131415161718&lt;form onSubmit=&quot;{handleRegist}&quot;&gt; &lt;div className=&quot;form-group&quot;&gt; &lt;label for=&quot;id&quot;&gt;ID&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot; id=&quot;id&quot; className=&quot;form form-control&quot; onChange={(e) =&gt; { setVegeId(e.target.value); }} /&gt; &lt;/div&gt; &lt;div className=&quot;form-group&quot;&gt; &lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt; &lt;input type=&quot;text&quot; className=&quot;form form-control&quot; name=&quot;name&quot; id=&quot;name&quot; onChange={(e) =&gt; { setVegeName(e.target.value); }} /&gt; &lt;/div&gt; &lt;div className=&quot;form-group&quot;&gt; &lt;label for=&quot;color&quot;&gt;Color&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;color&quot; id=&quot;color&quot; className=&quot;form form-control&quot; onChange={(e) =&gt; { setVegeColor(e.target.value); }} /&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot;&gt;登録&lt;/button&gt;&lt;/form&gt; &emsp;シンプルなフォームです。フォーム送信時の handleRegist の登録を行い、各テキストボックスに onChange で state を更新するようにしています。 &emsp; 野菜アイテムの表示についてです。 123456789101112131415161718192021222324252627282930313233343536373839404142434445{ vegeList.map((value, key) =&gt; { return ( &lt;div className=&quot;vege-item&quot; key={key}&gt; &lt;span&gt;{value.id} &lt;/span&gt; &lt;span&gt;{value.name} &lt;/span&gt; &lt;span&gt;{value.color}&lt;/span&gt; &lt;br /&gt; &lt;form onSubmit={() =&gt; { handleUpdate(value.id); }} &gt; &lt;span&gt;名前&lt;/span&gt; &lt;input type=&quot;text&quot; onChange={(e) =&gt; { setNewName(e.target.value); }} /&gt; &lt;br /&gt; &lt;span&gt;色&lt;/span&gt; &lt;input type=&quot;text&quot; onChange={(e) =&gt; { setNewColor(e.target.value); }} /&gt; &lt;br /&gt; &lt;button type=&quot;submit&quot;&gt;更新&lt;/button&gt; &lt;/form&gt; &lt;form onSubmit={() =&gt; { handleDelete(value.id); }} &gt; &lt;button type=&quot;submit&quot;&gt;削除&lt;/button&gt; &lt;/form&gt; &lt;br /&gt; &lt;/div&gt; ); });} &emsp;vegeList に対して、map メソッドを使い、野菜アイテムを表示します。 &emsp;以上で、フロントの説明を終わります。 &emsp;次回の Part 2 では、バックエンドの処理、DB についてまとめたいと思います。 ひとこと&emsp;Material-UI 使って見た目を整えたい。最近、Tailwind CSS に興味がある。 関連記事 【Node.js】Express から MySQL に接続しよう 【Node.js】Express で簡単なフォームをつくろう 【React】カウントアプリで useState を使ってみた 参考記事 【Ajax】axios を使って簡単に HTTP 通信 axios ライブラリを使ってリクエストする","link":"/2020/10/08/%E3%80%90React-Node-MySQL%E3%80%91CRUD%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F-Part-1/"},{"title":"【React + Node + MySQL】CRUDアプリケーションをつくってみた Part 2","text":"はじめに&emsp;今回の記事では、フロントを React.js、バックを Node.js、Express、データベースを MySQL で作った CRUD アプリケーションについてまとめたいと思います。この Part 2 では、バックでの処理についてまとめたいと思います。 &emsp;当ブログ『Yuuuki Blog』では、筆者自身の学習のアウトプット、復習用メモの作成を目的に運営しています。React や Node、Hexo についての記事を主に投稿しています。また、大学生ならではの記事も投稿しています。 この記事の Part 1 は以下のリンクからご覧ください。 【React + Node + MySQL】CRUD アプリケーションをつくってみた Part 1 目次 注意事項 使用する DB・TABLE index.js について Create Read Update Delete 関連記事 参考文献 注意事項&emsp;この記事で紹介する CRUD アプリケーションは単に CRUD の機能を実装したものです。 &emsp;筆者自身のインプットの質を高めることを目的の一つとして、記事を執筆しています。そのため、アプリの実用性は皆無です。 &emsp;この Part 2 では、インスタンス化、待ち受け等の説明は省略します。CRUD の機能をメインにまとめます。 &emsp;筆者の僕自身プログラミング初学者のため、見苦しいコードも散見されると思います。その場合、Twitter にてご指導いただけると幸いです。 使用する DB・TABLE&emsp;今回、DB として MySQL を利用しています。また、使用するテーブル vegetables は以下のようなものです。id・name・color の 3 カラムを持ちます。 index.js について&emsp;まずは、モジュールをロードします。 1234const express = require(&quot;express&quot;);const mysql = require(&quot;mysql&quot;);const bodyParser = require(&quot;body-parser&quot;);const cors = require(&quot;cors&quot;); &emsp;express、mysql、body-parser、cors を require メソッドでロードします。 &emsp;次に、Express から MySQL に接続します。（一部伏字を使用しています。） 123456const connection = mysql.createPool({ host: &quot;localhost&quot;, user: &quot;root&quot;, password: &quot;*******&quot;, database: &quot;xxxxxxx&quot;,}); これより、CRUD の各機能の説明に入ります。 Create123456789101112131415app.post(&quot;/insert&quot;, (req, res) =&gt; { const vegeId = req.body.id; const vegeName = req.body.name; const vegeColor = req.body.color; const sqlInsert = &quot;INSERT INTO vegetables(id, name, color) VALUES (?, ?, ?)&quot;; connection.query( sqlInsert, [vegeId, vegeName, vegeColor], (error, results) =&gt; { console.log(&quot;エラー：&quot; + error); } );}); &emsp;post メソッドを使用します。Body-Parser を利用し、フロントから送信されてきた野菜アイテムの情報を取得します。 &emsp;次に、SQL の INSERT 文を定義します。（詳しい使い方は略） &emsp;最後に、query メソッドで SQL クエリを実行し、野菜アイテムを DB に登録します。 Read1234567app.get(&quot;/get&quot;, (req, res) =&gt; { const sqlSelect = &quot;SELECT * FROM vegetables&quot;; connection.query(sqlSelect, (error, results) =&gt; { res.send(results); console.log(results); });}); get メソッドを使用します。 SELECT 文を定義します。 &emsp;query メソッドで SQL クエリを実行し、DB からデータを取得します。 Update1234567891011app.put(&quot;/update&quot;, (req, res) =&gt; { const id = req.body.id; const name = req.body.name; const color = req.body.color; const sqlUpdate = &quot;UPDATE vegetables SET name = ?, color = ? WHERE id = ?&quot;; connection.query(sqlUpdate, [name, color, id], (error, reslts) =&gt; { console.log(error); });}); &emsp; put メソッドを使用します。Body-Parser を利用し、フロントから送信されてきた野菜アイテムの情報を取得します。 &emsp;SQL の UPDATE 文を定義し、query メソッドで実行し、野菜アイテムの情報を更新します。 Delete12345678app.delete(&quot;/delete/:id&quot;, (req, res) =&gt; { const id = req.params.id; const sqlDelete = &quot;DELETE FROM vegetables WHERE id = ?&quot;; connection.query(sqlDelete, id, (error, reslts) =&gt; { console.log(error); });}); &emsp;リクエストされたパスから、パラメータの id を取得します。 &emsp;SQL の DELETE 文を宣言し、query メソッドで実行し、野菜アイテムを DB から削除します。 以上で、CRUD 機能の説明を終わります。 関連記事 【React + Node + MySQL】CRUD アプリケーションをつくってみた Part 1 【Node.js】Express から MySQL に接続しよう 【Node.js】Express で簡単なフォームをつくろう 【React】カウントアプリで useState を使ってみた 参考文献 [Node.js][Express]リクエストからパラメータを取得する・POST されたデータを取得する","link":"/2020/10/10/%E3%80%90React-Node-MySQL%E3%80%91CRUD%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F-Part-2/"},{"title":"Google Adsenseでブログの収益化に成功しました","text":"はじめに&emsp;この記事では、Google Adsense でこのブログ『Yuuuki Blog』の収益化に成功したことや収益化に至るまでの軌跡についてまとめたいと思います。 目次 とある日の朝 審査合格までの期間 審査合格まで意識したこと これからの Yuuuki Blog について 人気記事 とある日の朝&emsp;先日、10 月 14 日の朝、Google から以下のようなメールが届きました。 &emsp;このメールは、Google Adsense からの Adsense 審査に合格した旨を伝えるものでした。 &emsp;このブログは、収益化を一番の目的にしたものではないですが、以前から僕は収益化に少し興味があったため、このメールを受け取ったとき、素直にうれしかったです。 &emsp;このブログが Google Adsense の審査に合格できたのも、この記事を読んでくださっている方々のおかげだと思います。感謝します。 &lt;(_ _)&gt; &lt;(_ _)&gt; &lt;(_ _)&gt; &lt;(_ _)&gt; &lt;(_ _)&gt; &emsp;次の項目から、このブログが Google Adsense に合格するまでの軌跡、審査に合格するまでに意識したことなどの情報を明らかにしていきたいと思います。 審査合格までの期間&emsp;このブログの初記事投稿日は、2020 年 8 月 29 日でした。ちなみに以下のような記事を投稿しました。 GET と POST の違い &emsp;Google Adsense に審査を申し込んだ日は、2020 年 9 月 30 日でした。この時点で 投稿記事数は、22 記事 記事の平均文字数は、1602 字 投稿頻度は多いときで、二日に一回、少ないときで三日に一回 平均 PV/日は 20 前後 （PV = Page View、ページ閲覧数） でした。 &emsp;そして、Google Adsense に合格した日は、2020 年 10 月 14 日です。かかった期間は約 2 週間でした。（時間がかかったほうだと思います。） 審査合格まで意識したこと&emsp;Google Adsense に合格するまでに僕が意識したことは以下の通りです。 最低でも、1000 字の記事を投稿すること（実現できていませんが、、、） 独自ドメインを取得すること SNS でアクセス数を伸ばすこと &emsp;一つ目は、ブログの内容を充実させることです。審査合格には、ブログの記事内容が重要なので、充実した内容の記事を書くことを意識しました。（技術記事の場合、そうしたほうが、記事内容のインプットも高まるので） &emsp;二つ目は、独自ドメインを取得することです。ドメインを取得できるサービスは多くありますが、僕は、お名前ドットコムを利用しました。ドメイン名を決めるときは、覚えやすいようにシンプルなものにしました。 &emsp;三つ目は、SNS を活用してアクセス数を獲得することです。僕の場合、主に、Twitter を利用して、ブログのアクセス数を獲得しました。 これからの Yuuuki Blog について&emsp;これから、このブログでは、今までと同様、技術系の記事を投稿していきます。記事内容に誤りがある、また、改善点がある場合、Twitter にてぜひご指導お願いします。 &emsp;Google Adsense に合格はしましたが、正直、収益を伸ばすことはあまり考えていません。 &emsp;（ですが、ネットでモノを売るということに興味があるため、アフィリエイトに挑戦するかもしれません。そのときはどうぞ温かい目でよろしくお願いします。） &emsp;読者の皆様、これからもこのブログをよろしくお願いします。&lt;(_ _)&gt; &lt;(_ _)&gt; 人気記事 【React + Node + MySQL】CRUD アプリケーションをつくってみた Part 1 【React + Node + MySQL】CRUD アプリケーションをつくってみた Part 2 Hexo とはなにか？始め方の一番分かりやすい解説！！ 【React】カウントアプリで useState を使ってみた","link":"/2020/10/16/Google-Adsense%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E5%8F%8E%E7%9B%8A%E5%8C%96%E3%81%AB%E6%88%90%E5%8A%9F%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/"},{"title":"【Node.js】カレントディレクトリ・ファイルのパスを取得する方法","text":"はじめに&emsp;今回は、JavaScript でカレントディレクトリのパスを取得する方法やそのディレクトリ内のファイルのパスを取得する方法についてまとめたいと思います。勉強メモの意図でこの記事を書いています。 目次 実行環境 process.cwd() を使う方法 __dirname を使う方法 process.cwd() と __dirname の違い これまでの【Node.js】シリーズ 参考資料 実行環境Node.js のバージョン 1v12.16.1 ディレクトリ構造 Node.js&emsp; ├─ text.txt&emsp; ├─ index.js&emsp; ├─ index.html&emsp; └─ style.css process.cwd() を使う方法&emsp;この項目では、process.cwd()を使ってパスを取得する方法についてまとめます。実際にコードを見てみましょう。 1234567891011121314const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);let fileNames = [];const currentDir = process.cwd();console.log(`カレントディレクトリ:${currentDir}`);fileNames = fs.readdirSync(currentDir);fileNames.map((fileName) =&gt; { let url = path.join(currentDir, fileName); console.log(url);}); これを、node コマンドで実行します。実行結果は以下の通りです。 12345カレントディレクトリはC:\\Users\\username\\Desktop\\Node.jsC:\\Users\\username\\Desktop\\Node.js\\index.htmlC:\\Users\\username\\Desktop\\Node.js\\index.jsC:\\Users\\username\\Desktop\\Node.js\\style.cssC:\\Users\\username\\Desktop\\Node.js\\text.txt &emsp;カレントディレクトリのパスが取得できていることが確認できます。また、ディレクトリ内のファイルも取得できていることが分かります。 &emsp;ちなみに、コード内で使用したreaddirSyncは、特定のディレクトリ内のファイルを取得するものです。 __dirname を使う方法&emsp;この項目では、__dirname を使ってパスを取得する方法についてまとめます。実際にコードを見てみましょう。 12345678910111213const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);let fileNames = [];console.log(`カレントディレクトリは${__dirname}`);fileNames = fs.readdirSync(__dirname);fileNames.map((fileName) =&gt; { let url = path.join(__dirname, fileName); console.log(url);}); これを、node コマンドで実行します。実行結果は以下の通りです。 12345カレントディレクトリはC:\\Users\\username\\Desktop\\Node.jsC:\\Users\\username\\Desktop\\Node.js\\index.htmlC:\\Users\\username\\Desktop\\Node.js\\index.jsC:\\Users\\username\\Desktop\\Node.js\\style.cssC:\\Users\\username\\Desktop\\Node.js\\text.txt &emsp;process.cwd()の場合と同様に、カレントディレクトリのパスが取得できていることが確認できます。また、ディレクトリ内のファイルも取得できていることが分かります。 process.cwd() と __dirname の違い&emsp;上記のように、 process.cwd() や __dirname を使用すると、パスを取得できることが確認できました。では、これらの違いは何でしょうか。 process.cwd()は、現在のワーキングディレクトリのパスを取得するものです。このメソッドを実行した場所の絶対パスを取得できます。 __dirname は、実行した JavaScript ファイルがあるディレクトリの絶対パスを取得するものです。 &emsp;コードで確認すると、以下のようになります。 1234567console.log(process.cwd());console.log(__dirname);process.chdir(&quot;..&quot;);console.log(process.cwd());console.log(__dirname); 実行結果 1234C:\\Users\\username\\Desktop\\Node.jsC:\\Users\\username\\Desktop\\Node.jsC:\\Users\\username\\Desktop\\Node.jsC:\\Users\\username\\Desktop\\Node.js &emsp;以上で今回の記事を終わりたいと思います。 これまでの【Node.js】シリーズ 【Node.js】Node.js・npm とは インストール方法まで解説 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 【Node.js】Express で簡単なフォームをつくろう 【Node.js】Express の使い方～インストール（Express Generator の使い方）～ 参考資料 実行中の JavaScript ファイルのパスやディレクトリ名を取得する (**filename, **dirname) What’s the difference between process.cwd() vs __dirname?","link":"/2020/10/22/%E3%80%90Node-js%E3%80%91%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%83%BB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"プログラミング","slug":"プログラミング","link":"/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"},{"name":"通信技術","slug":"通信技術","link":"/tags/%E9%80%9A%E4%BF%A1%E6%8A%80%E8%A1%93/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Bootstrap","slug":"Bootstrap","link":"/tags/Bootstrap/"},{"name":"Font Awesome","slug":"Font-Awesome","link":"/tags/Font-Awesome/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Express","slug":"Express","link":"/tags/Express/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"Material-UI","slug":"Material-UI","link":"/tags/Material-UI/"},{"name":"役立つ知識","slug":"役立つ知識","link":"/tags/%E5%BD%B9%E7%AB%8B%E3%81%A4%E7%9F%A5%E8%AD%98/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"Google Adsense","slug":"Google-Adsense","link":"/tags/Google-Adsense/"}],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"通信技術","slug":"通信技術","link":"/categories/%E9%80%9A%E4%BF%A1%E6%8A%80%E8%A1%93/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Node.js","slug":"Node-js","link":"/categories/Node-js/"},{"name":"React","slug":"React","link":"/categories/React/"},{"name":"男子大学生のつぶやき","slug":"男子大学生のつぶやき","link":"/categories/%E7%94%B7%E5%AD%90%E5%A4%A7%E5%AD%A6%E7%94%9F%E3%81%AE%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8D/"},{"name":"大学生対象","slug":"大学生対象","link":"/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AF%BE%E8%B1%A1/"},{"name":"Google Adsense","slug":"Google-Adsense","link":"/categories/Google-Adsense/"}]}