{"pages":[],"posts":[{"title":"初投稿！！","text":"こんにちは、Yuuukiです。 &emsp;私はブログを通して日々の学びのアウトプットを行うことや日常の出来事を発信すること等を目的にブログを開設しました。私は現在 web 系のことを勉強している京都の大学二回生です。 この記事では、このブログの目的・目標について書いていきます。 目的・web 系の勉強を通して学んだことをアウトプットすること。・日常の出来事や私の持つ意見・考えを発信すること（また、そのことを通して文章力を身に着けること） 等があります。 目標・アウトプットを通して、自分の学びを深めること・文章力を身に着けること 等があります。 このブログを通して、私自身はもちろんのこと読者のあなたも成長できるように頑張りたいです！ それでは、次回の記事で","link":"/2020/08/28/%E5%88%9D%E6%8A%95%E7%A8%BF%EF%BC%81%EF%BC%81/"},{"title":"GETとPOSTの違い","text":"こんにちは、Yuuukiです。この記事では、GET と POST について述べていこうと思います。 目次 はじめに HTTP（Hyper Text Transfer Protocol）とは GET メソッド POST メソッド 特徴まとめ ひとこと 参考 はじめに&emsp;みなさんは web について学習していると GET/POST という言葉をよく目にしませんか？（私もよく目にしました。）この記事では、 HTTP とは何か、またそのメソッドである GET/POST とは何かについて説明します。&emsp;いずれの事柄も web 開発を行う上で理解しておかなければならない内容であるため、この記事を読んで大まかに理解できるようにしましょう。 HTTP（Hyper Text Transfer Protocol）とは &emsp; HTTPとは、（Hyper Text Transfer Protocol）の略であり、大まかにいうと、サーバ・クライアント間で通信をするときの規約のことです。みなさんが web ページを見るために、web ブラウザに URL を入力すると、web サーバに対して、リクエスト（=要求）が送られます。その後、そのリクエストに応じて、web サーバがレスポンスを返します。 このような過程を経て、web ページがみなさんの PC に表示されます。このとき、用いられる通信のルールが HTTP です。 GET メソッド &emsp;GET メソッドは、上記の HTTP メソッドのひとつで、データを取得するときに利用されるものです。このメソッドは、「いつ、どこからアクセスしても同じ結果が返される」（＝冪等である）ものです。そのため、GET はアクセスの基本と考えてもよいでしょう。 また、このメソッドはデータを送信する際に 以下の例のように URL にデータを付与するため、情報が丸見えになってしまうという特徴があります。 例）/get_form.html?userName=Yuuuki&age=20 （↑ これってパスワード・個人情報を送信するとき、恐いですよね……汗） POST メソッド &emsp;POST メソッドも、GETと同様に上記の HTTP メソッドのひとつです。このメソッドは、送信フォームなどで利用される方式で、データを登録・削除したいときに利用されます。 &emsp;POST は GET とは違い、クライアントが行うアクセスの時々で異なる（＝冪等でない）結果が返されます。 また、このメソッドはデータを送信する際に、HTTP リクエストのボディ部分にデータが埋め込まれるため、GET のようにデータが URL を通して見られることがありません。 特徴まとめ&emsp;GET と POST の特徴を簡単にまとめると以下のようになります。GETデータの読み取りに利用され、冪等である。POSTデータの登録・削除などデータの変更に利用され、冪等でない。この記事などを通して、GET/POST を理解できるようにしましょう。それでは、次回の記事で ひとこと&emsp;説明文で「冪等」って言葉使ったけど、この熟語は「べきとう」って読んで、「ある操作を 1 回行っても複数回行っても結果が同じであること」っていう意味らしいよ。（Wikipedia より） 参考 GET と POST の違いについて HTTP メソッド GET と POST の違い","link":"/2020/08/29/GET%E3%81%A8POST%E3%81%AE%E9%81%95%E3%81%84/"},{"title":"そもそもBlogとは？","text":"こんにちは、Yuuuki です。この記事では、そもそも Blog って何？ということについて書いていきます。 はじめに&emsp;あるとき、「そもそも Blog って何だろう」と思いました。そこで、ネットで Blog について調べてみました。 Blog とは&emsp;Blog とは、『覚え書きや論評などを記すウェブサイトである。「Web に Log する」のウェブログ (weblog) をブログ（Blog）と略称する。』(Wikipedia より)というものらしいです。&emsp;Blog って weblog の略称だったんですね。初めて知った！ブログといっても、趣味ブログ、ビジネスブログ、技術ブログなど様々な種類がありますよね。&emsp;ブログには、収益を得るためであったり、勉強の記録のためであったり、筆者に応じて様々な目標がありますね。&emsp;このブログでは、このブログの初めての記事でも述べたような目的のもと執筆しています。 参考までに ↓ 初投稿！！ ということで「Blog ってそもそも何？」、気になったので調べてみたでした。それでは、次回の記事で 参考 Blog とは何か ブログ（Wikipedia）","link":"/2020/08/29/%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82Blog%E3%81%A8%E3%81%AF%EF%BC%9F/"},{"title":"大学生のレポート作成時にWordで役立つショートカットキー","text":"はじめに&emsp;俺的大学生がレポートを作成する際に Word で役立つショートカットまとめです。これを見て大学生の読者はレポート作成効率を爆上げしましょう！ Ctrl + A&emsp;文章全選択 今押して試してみよう Ctrl + C&emsp;選択部分のコピー Ctrl + V&emsp;コピーしたものをペースト（貼り付け） Ctrl + X&emsp;カット（切り取り）&emsp;Ctrl + C、Ctrl + V、Ctrl + X をよく組み合わせて使いますね Ctrl + Z&emsp;一つ前の状態に戻る。 Ctrl + Y&emsp;前の動作をやり直す&emsp;Ctrl + Z とよく合わせて使いますね。誤って一つ前の状態へ戻ってしまっても、Ctrl + Y でやり直すことが出来ます。 Ctrl + S&emsp;上書き保存する。 Ctrl + Shift + S&emsp;名前を付けて保存する。 Home&emsp;カーソルを行の先頭に移動させる。&emsp;カーソルを矢印キー（↑ ↓ ← →）で移動させるのはもうやめよう。 End &emsp;カーソルを行の末に移動させる。&emsp;Home と同様に便利なショートカットですね。 Ctrl + B&emsp;選択部分を太字にする。 Ctrl + U&emsp;選択部分に下線を引く Shift + ↑ ↓ ← →&emsp;選択部分の変更&emsp;選択部分を矢印キーに応じて変更できます。 Ctrl + Shift + &lt;&emsp;選択部分のフォントの大きさを一段階上げる。 Ctrl + Shift + &gt;&emsp;選択部分のフォントの大きさを一段階下げる。 Ctrl + Shift + F&emsp;フォント変更ウィンドウを出す。 最後に&emsp;私はこれらのショートカットキーを覚えたら、レポートの作成効率が飛躍的に上がりました。みなさんも徐々にこれらのショートカットを使いながら覚え、レポート作成の効率を上げてみましょう。将来、Word で文書を作成する際にもきっと役立つショートカットばかりだと思います。&emsp;それでは、また次の記事で","link":"/2020/08/31/%E5%A4%A7%E5%AD%A6%E7%94%9F%E3%81%AE%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABWord%E3%81%A7%E5%BD%B9%E7%AB%8B%E3%81%A4%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%82%AD%E3%83%BC/"},{"title":"【JavaScript】 三項演算子について","text":"はじめに&emsp;今回は、JavaScript の三項演算子についてまとめます。三項演算子を学ぶことで、プログラムが簡略になり、読みやすいものになるでしょう。 三項演算子とは？ &emsp;三項演算子とは、if・else 文を簡単に短く書き換えたものです。それでは、ます if・else 文を見てみましょう。 12345678910let height = 170;if(height &gt;= 180){ //条件式 console.log(&quot;高身長です&quot;); //条件が true であった場合の処理}else{ console.log(&quot;高身長ではありません&quot;); //条件が false であった場合の処理} この場合、コンソールには、「高身長ではありません」と出力されます。 上記の if・else 文を三項演算子を用いて書くと、以下のようになります。 123let height = 180;console.log(height &gt;= 180 ? &quot;高身長です&quot; : &quot;高身長ではありません&quot;); となります。三項演算子を利用することで if・else 文が簡略化され、見やすくなりましたね、三項演算子では、 1条件式 ? true の場合の処理 : false の場合の処理 というように記述します。真偽値によって行う処理の文が長い場合は、以下のように、複数の行に分けて書くことも可能です。 123456let favoFruit = &quot;apple&quot;;favoFruit === &quot;apple&quot; ? console.log(&quot;favoFruitには apple が格納されています。&quot;) : console.log(&quot;favoFruitには apple が格納されていません。&quot;) 条件式に論理積を使用したいときは、以下のように記述すれば OK です。 123456let num = 20;num &gt;= 10 &amp;&amp; num % 2 === 0 ? console.log(&quot;numは10以上の偶数です&quot;) : console.log(&quot;numは10以上の偶数ではありません&quot;) 真偽値によって行う処理の文が複数あるとき、「,」カンマで区切りましょう。また、処理の文を（）で囲むと見やすくなりますね。 123456789101112let num = 20;num % 2 === 0 ? ( num++, console.log(&quot;numを奇数にしました&quot;) ) : (num++, console.log(&quot;numは10より大きい偶数ではありません&quot;) ) では、以下の if・else 文を三項演算子で書き換えるとどのようになるでしょうか。 123456789101112let num = 24;if (num % 2 === 0) { if (num % 3 === 0) { console.log(&quot;numは6の倍数です&quot;); } else { console.log(&quot;numは2の倍数ですが、6の倍数ではありません&quot;); }} else { console.log(&quot;numは奇数です&quot;);} 三項演算子を使用すると上記のコードを以下のように、書くことが出来ます。 12345678let num = 24;num % 2 === 0 ? num % 3 === 0 ? console.log(&quot;numは6の倍数です&quot;) : console.log(&quot;numは2の倍数ですが、6の倍数ではありません&quot;) : console.log(&quot;numは奇数です&quot;) if・else 文が非常にシンプルになり見やすくなりましたね。 以上、三項演算子についてまとめました。それでは、次回の記事で ひとこと&emsp;if・else 文で書くより三項演算子使って書いた方がなんとなくかっこいいよね、使いすぎ注意だけど 参考 【JavaScript 入門】条件(三項)演算子の使い方と活用例まとめ！ MDN","link":"/2020/09/01/%E3%80%90JavaScript%E3%80%91-%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"DOMとは","text":"はじめに &emsp;この記事では、DOM とは何かについてまとめます。DOM という用語は JavaScript を勉強したことがある人ならば、だれもが聞いたことがあるものだと思います。この記事を読んで、DOM とは何なのかを学びましょう。 DOM とは&emsp;DOM とは、Document Object Model の略であり、「文書(Document)をモノ(Object)として扱う仕組み(Model)」と意訳することが出来ます。DOM とは、HTML や XML 文書を JavaScript で操作することを可能にする仕組みのことなんです。DOM は、HTML や XML 文書を操作するための API ともいうことができるでしょう。 &emsp;次の項目では、DOM を操作するうえで聞くことになるであろう言葉「ノード」について説明します。 ノードとは &emsp;ノードとは、HTML や XML 文書の中に現れる一つ一つの要素のことです。 &emsp;例えば、HTML ファイル内の&lt;p&gt;&lt;span&gt;&lt;button&gt;なんかがノードです。これらのノードには、親子関係、兄弟関係があります。それらの関係について理解するために以下の HTML ファイルを見てみましょう。 12345678910&lt;html lang=&quot;ja&quot;&gt; &lt;head&gt; &lt;title&gt;JavaScript勉強&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;DOMについて学ぼう&lt;/p&gt; &lt;span&gt;DOMがなんだかわかりましたか？&lt;/span&gt; &lt;button&gt;Yes&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; &emsp;一般に HTML ファイル内の要素は階層構造（ツリー構造）になっています。上記の HTML ファイルの階層構造は以下のようになっています。 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;＜図 1 HTML の階層構造＞ &emsp;上記の HTML ファイルでは、&lt;html&gt;タグの中に、&lt;head&gt; &lt;body&gt;タグがあり、それぞれの中に、&lt;title&gt;タグ、&lt;p&gt;&lt;span&gt;&lt;button&gt;タグがあるという構造になっています。このとき、&lt;html&gt;タグ（親）と&lt;head&gt;、&lt;body&gt;タグ（子）が親子関係に、&lt;head&gt;タグと&lt;body&gt;タグが兄弟関係になっています。そのほかにも、&lt;body&gt;タグ（親）と&lt;p&gt;&lt;span&gt;&lt;button&gt;タグ（子）が親子関係になっていますね。そして、&lt;p&gt;&lt;span&gt;&lt;button&gt;が兄弟関係になっていますね。つまり、ある要素の上の階層の要素が親要素となり、同一階層の要素が兄弟要素となります。 まとめ&emsp;最後にこの記事での要点をまとめます。 DOM とは、HTML や XML 文書を JavaScript で操作することを可能にする仕組み、HTML や XML 文書を操作するための API である。 ノードは、HTML や XML 文書の中に現れる一つ一つの要素のことであり、それらは親子・兄弟関係を持ち、階層構造を作っている。 今回の記事では、DOM とは何なのかについてまとめました。具体的な、DOM 操作方法については、今後の記事でまとめていきます。 それでは、次回の記事で 参考文献 MDN エンジニアの入り口","link":"/2020/09/03/DOM%E3%81%A8%E3%81%AF/"},{"title":"【JavaScript】簡単なカウントアプリの作り方","text":"はじめに&emsp;この記事では、JavaScript を使った超絶簡単なカウントアプリについてまとめます。とても簡単に作ることができるため、今日 JavaScript を学習し始めた人でも作ることができるでしょう。 &emsp;今回つくるカウントアプリでは、基本的な DOM 操作のメソッドを取り上げているので、前回の記事「DOM とは」と合わせて読むのもよいでしょう。 DOM とは &emsp;今回は、以下のようなカウントアプリを作成します。 &emsp;まずは、今回作るカウントアプリのディレクトリ構造について話します。構造は以下の通りです。 count&emsp; ├─ index.html&emsp; └─ app.js &emsp;次に、各ファイルの中身を見てみましょう。まずは、index.html です。 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Count&lt;/title&gt; &lt;/head&gt; &lt;style&gt; .container { text-align: center; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;button id=&quot;cntUp&quot;&gt;+1&lt;/button&gt; &lt;button id=&quot;cntDown&quot;&gt;-1&lt;/button&gt; &lt;h1 id=&quot;currentCnt&quot;&gt;0&lt;/h1&gt; &lt;input id=&quot;reset&quot; type=&quot;button&quot; value=&quot;reset&quot; /&gt; &lt;/div&gt; &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; &emsp;&lt;body&gt;タグ内には、プラスカウント、マイナスカウント、カウントリセットの機能を持つ要素を&lt;button&gt;タグで実装しています。現在のカウント数を表す要素として&lt;h1&gt;タグを使用しています。また、これらの要素を中央に配置するために、&lt;style&gt;タグ内で要素に対して、text-align: center; を指定しています。&emsp;各要素の ID は、それぞれ、cntUp、cntDown、reset、currentCnt、reset としています。JavaScript を使って、DOM 操作を行うために必要なため、各要素に ID を持たせておきましょう。&emsp;次は、app.js の中身を見てみましょう。カウントアプリの JavaScript ファイルである app.js は&lt;body&gt;の閉じタグの直前に読み込んでいます。これは、web ページ、この場合、index.html の表示をブラウザ上で速くするためです。（今回は、ソースコードが少ないため、&lt;body&gt;の閉じタグの直前でなくても良いとは思いますが、、、） JavaScript ファイル（app.js）は以下のようになります。 12345678910111213141516171819202122const upButton = document.getElementById(&quot;cntUp&quot;);const downButton = document.getElementById(&quot;cntDown&quot;);const resetButton = document.getElementById(&quot;reset&quot;);const currentCnt = document.getElementById(&quot;currentCnt&quot;);let currentNum = 0;upButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum++; currentCnt.innerHTML = currentNum;});downButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum--; currentCnt.innerHTML = currentNum;});resetButton.addEventListener(&quot;click&quot;, () =&gt; { currentNum = 0; currentCnt.innerHTML = currentNum;}); &emsp;ソースコードの中で、まず、プラスカウント、マイナスカウント、カウントリセット、現在のカウント数の要素を document オブジェクトのメソッド getElementById で取得します。（先ほど、要素に ID を持たせておいたのは、このためですね。）ここでは、各要素を取得し、変数に格納し、オブジェクト化し、操作しやすくしているんですね。また、現在のカウント数そのものを表す変数 currentNum に 0 を格納しておきます。 （ちなみに、document オブジェクトは HTML の要素を簡単に扱えるようにするためのものです。このオブジェクトには、上記の getElementById などの便利なメソッド、プロパティが用意されています。） &emsp;次に、プラスカウント、マイナスカウント、カウントリセットの機能の実装方法を説明します。 &emsp;ボタンをクリックすると、カウント数がアップ（ダウン、リセット）する機能は addEventListener で実装します。各オブジェクトに対して、click したら、カウント数をカウント数がアップ（ダウン）するように、currentNum に対してインクリメント演算子++（デクリメント演算子–）を利用します。 12currentNum++;currentNum--; &emsp;その後、currentCnt に対して、innerHTML を用いて、現在のカウント数を書き換えます。 1currentCnt.innerHTML = currentNum; &emsp;リセット機能の場合は、click されたら、リセットするように currentNum に 0 を代入し、currentCnt に対して、innerHTML を用いて、現在のカウント数を書き換えます。 12currentNum = 0;currentCnt.innerHTML = currentNum; &emsp;なお、addEventListner のイベントリスナーの登録は、ソースコードの通り、アロー関数を用いて記述しています。&emsp;とても間単に作れるカウントアプリですね。みなさんも自分なりに作ってみましょう。 以上、JavaScript を使った超絶簡単なカウントアプリの説明でした。それでは、次回の記事で","link":"/2020/09/03/%E3%80%90JavaScript%E3%80%91%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/"},{"title":"Mapメソッドの使い方","text":"はじめに&emsp;今回は map メソッドについての記事です。JavaScript を学んでいると、map メソッドというものを耳にしたことがあるかもしれません。この記事では、map メソッドとは、何なのか、また、map メソッドの使い方についてまとめたいと思います。 目次 map メソッドとは map メソッドの使い方 まとめ 参考 map メソッドとは&emsp;map メソッドとは、「Array オブジェクトに用意されている配列を操作するためのメソッドであり、配列の各要素に対して引数として受け取った関数の処理を行い、その処理された要素からなる新たな配列を戻り値として返すメソッド」です。 &emsp;説明されてもなんだかよく分かりませんよね。 &emsp;次の項目では、具体的な使い方について説明したいと思います。 map メソッドの使い方&emsp;map メソッドの使い方として、まずは、最も簡単な map メソッドの使用例を見てみましょう。 123456const array1 = [2, 5, 7, 9];const array2 = array1.map((data) =&gt; data * 3);// array2 = [6, 15, 21, 27] &emsp;このコードでは、まず、map メソッドの操作対象である入れる array1 を定義します。次に、この配列に対して、map メソッドを呼びだします。map メソッドの引数として、配列 array1 の各要素を 3 倍するような処理をアロー関数の形で記述しています。すると、配列 array2 は、array1 の各要素が 3 倍された要素からなる配列になります。 &emsp;次に、別の map メソッドの使用例を見てみましょう。 123456789101112const array1 = [2, 5, 7, 9, 12, 15];const array2 = array1.map((data, index) =&gt; {if (index % 2 !== 0) {return data \\* 2;} else {return data;}});// array2 = [2, 10, 7, 18, 12, 30] &emsp;上記のソースコードは、引数に受けとった関数（コールバック関数）の引数に、data と index があります。data とは、配列（この場合 array1）の各要素を表しています。index とは、配列の各要素の番号を表しています。これらと条件分岐 if・else を用いて、index 番号が奇数の要素を 2 倍にするという処理を実装しています。 &emsp;さらに、別の map メソッドの使用例を見てみましょう。次は、map メソッドの第二引数としてオブジェクトを渡すと、処理の中で、this を使ってオブジェクトを参照することが出来ます。次のソースコードを見てみましょう。 12345678910111213141516171819202122const age = {田中: 35,佐藤: 24,高橋: 30,武田: 15,加藤: 40,中井: 33,太田: 10,};const people = [&quot;高橋&quot;, &quot;武田&quot;, &quot;加藤&quot;, &quot;太田&quot;];const array1 = people.map(function (value) {if (this[value] &gt;= 20) {return &quot;成人&quot;;} else {return &quot;未成年&quot;;}}, age);// array1 = [&quot;成人&quot;, &quot;未成年&quot;, &quot;成人&quot;, &quot;未成年&quot;] &emsp;このプログラムでは、オブジェクトで定義された人を要素とする配列に対して、map メソッドを使い、20 歳以上ならば、”成人”を、20 歳未満ならば、”未成年”を返すことで、配列の要素になっている人が成人か未成年かを判断することを実装しています。 まとめ&emsp;この記事では、map メソッドとは何か、map メソッドの使い方について説明しました。map メソッドは、配列の各要素に対して引数として受け取った関数の処理を行い、その処理された要素からなる新たな配列を返すメソッドでした。map メソッドは、配列を操作するうえで知っておくべきメソッドであるため、上記のプログラムを踏まえ、使い方を定着させましょう。 参考 【JavaScript 入門】配列処理をする map()の使い方と Map オブジェクトの解説！ MDN","link":"/2020/09/06/Map%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"}],"tags":[{"name":"通信技術","slug":"通信技術","link":"/tags/%E9%80%9A%E4%BF%A1%E6%8A%80%E8%A1%93/"},{"name":"役立つ知識","slug":"役立つ知識","link":"/tags/%E5%BD%B9%E7%AB%8B%E3%81%A4%E7%9F%A5%E8%AD%98/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"プログラミング","slug":"プログラミング","link":"/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"}],"categories":[{"name":"通信技術","slug":"通信技術","link":"/categories/%E9%80%9A%E4%BF%A1%E6%8A%80%E8%A1%93/"},{"name":"男子大学生のつぶやき","slug":"男子大学生のつぶやき","link":"/categories/%E7%94%B7%E5%AD%90%E5%A4%A7%E5%AD%A6%E7%94%9F%E3%81%AE%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8D/"},{"name":"大学生対象","slug":"大学生対象","link":"/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AF%BE%E8%B1%A1/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"}]}